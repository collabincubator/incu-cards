{"version":3,"sources":["components/Header/Header.module.css","components/Main/CardsPopup/CardPage/CardPage.module.scss","components/Main/Cards/Card/Card.module.scss","api/cards-api.ts","redux/profileReducer/profileReducer.ts","redux/appReducer/appReducer.ts","redux/authReducer/authReducer.ts","components/Header/Navigation/Navigation.tsx","components/Header/Header.tsx","components/Main/Profile/Profile.tsx","components/Main/PageNotFounded/PageNotFounded.tsx","components/common/Input/input.tsx","components/Main/Login/LoginForm/loginForm.tsx","components/Main/Login/Login.tsx","redux/registrationReducer/registrationReducer.ts","components/Main/Registration/registrationForm/registrationForm.tsx","components/Main/Registration/Registration.tsx","assets/img/svg/mail-circle-icon.svg","components/Main/Registration/CheckEmail.tsx","redux/restorePassReducer/restorePassReducer.ts","components/Main/RestorePass/restorePassForm/RestorePassForm.tsx","components/Main/RestorePass/RestorePass.tsx","redux/changePassReducer/changePassReducer.ts","components/Main/ChangePass/ChangePassForm/ChangePassForm.tsx","components/Main/ChangePass/ChangePass/ChangePass.tsx","assets/img/png/cybava.png","assets/icons/camera.svg","components/Main/ProfileEdit/ProfileEdit.tsx","components/Main/Auth/Auth.tsx","assets/icons/preloaderAppleLight.svg","redux/PacksReducer/PacksReducer.ts","redux/cardsReducer/CardsReducer.ts","components/common/EditableSpan/EditableSpan.tsx","components/Main/CardsPopup/CardPage/CardPage.tsx","components/Main/CardsPopup/CardsPopup.tsx","components/Main/Packs/pack/pack.tsx","components/Pagination/Pagination.tsx","components/Main/Packs/SearchPacks/SearchPacks.tsx","components/Main/Packs/Packs.tsx","components/Main/Cards/Card/Card.tsx","components/common/table/table.tsx","components/Main/Cards/Cards.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx","components/Main/Packs/Packs.module.scss","components/Main/Auth/Auth.module.scss","components/Header/Navigation/Navigation.module.css","components/Pagination/Pagination.module.scss","components/common/table/table.module.scss","App.module.scss","components/Main/Cards/Cards.module.scss","components/Main/CardsPopup/CardsPopup.module.scss"],"names":["module","exports","cardsRequest","axios","create","baseURL","withCredentials","authAPI","email","password","post","then","res","data","rememberMe","delete","name","avatar","put","resetPasswordToken","fromUser","message","packsAPI","params","get","cardsPack","id","_id","cardsAPI","card_id","grade","SET_PROFILE_DATA","SET_PROFILE_UPDATE","initialState","profile","profileActions","type","payload","profileReducer","state","action","STATUS","ERROR","INITIALIZING","THEME","status","error","initializing","theme","appActions","value","appReducer","LOGIN_FLOW","INFO","isLoggedIn","info","authActions","authReducer","Navigation","props","userName","useSelector","isLoggerIn","dispatch","useDispatch","useState","path","tempState","navLinks","map","link","index","className","styles","navLinkItem","to","toLowerCase","menuLink","activeClassName","menuLinkActive","setTheme","navList","FormGroup","FormControlLabel","control","Switch","size","onClick","label","Button","variant","color","catch","finally","Header","header","Profile","setName","onClickChangeNameHandler","changeProfileNameTC","onChange","e","currentTarget","onKeyPress","key","PageNotFounded","FormikCustomInput","position","isBlind","setIsBlind","Input","endAdornment","InputAdornment","IconButton","aria-label","VisibilityOff","Visibility","LoginForm","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","resetForm","handleSubmit","FormControl","getFieldProps","controlInputs","InputLabel","htmlFor","handleChange","aria-describedby","FormHelperText","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","forgotBox","navLinkForgotBox","disabled","formButtons","Login","footerBox","footerLink","SUCCESS","LOADING","registrationSuccess","loading","registrationActions","registrationReducer","RegistrationForm","history","useHistory","passwordConfirm","console","log","btnContainer","goBack","Registration","CheckEmail","src","emailCircleIcon","alt","imgSuccessAction","RESTORE","restoreActions","restorePassReducer","RestorePassForm","emailForRestore","RestorePass","CHANGE","successChangePass","changePassActions","success","changePassReducer","ChangePassForm","token","useParams","repeatPassword","passwordLength","ChangePass","ProfileEdit","nicknameForUpdate","emailForUpdate","imgProfileAvatarBox","profileAvatar","imgProfileAvatar","imgUpdateAvatarBox","updateAvatarIcon","imgUpdateAvatar","target","files","stopPropagation","Auth","container","classNames","box","dark","inner","render","SET_PACKS","SET_PAGE_COUNT","SET_PAGE_NUMBER","SET_RANGE_SIZE_PACKS","SET_PACKS_TOTAL_COUNT","SET_SORT_PACKS","SET_ONLY_MY_MODE","cardPacks","packsParams","min","max","page","pageCount","sortPacks","cardPacksTotalCount","pageCounts","onlyMy","packsActions","packs","rangeSize","order","sortBy","getReqParams","createSelector","packsReducer","user_id","SET_CARDS","SET_RANGE_SIZE_CARDS","SET_SORT_CARDS","SET_IS_OPEN_POPUP","SET_CARDS_TOTAL_COUNT","cards","cardsParams","cardsTotalCount","activePopupId","undefined","cardsActions","cardsReducer","sortCards","EditableSpan","React","memo","editMode","setEditMode","title","setTitle","TextField","autoFocus","onBlur","onDoubleClick","CardPage","author","card","nextPageHandle","rate","setRate","answerVisible","setAnswerVisible","cardPage","question","answer","prev","component","FormLabel","RadioGroup","Radio","CardsPopup","setPage","getState","a","batch","updateCardRateTC","cardsPages","i","popupQuestionContainer","popupQuestionBox","Pack","user_name","cardsCount","updated","created","packName","setPackName","user","onClickQuestionHandle","cardsPackId","cardsPack_id","Date","toLocaleDateString","day","month","year","packId","res1","updatePackTC","Pagination","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pagination","pagePanel","filter","el","p","cn","selectedPage","pageNumber","SearchPacks","inputProps","Packs","sortByStateUI","setSortByStateUI","range","setRange","useEffect","onClickSortByHandle","intOrder","onChangeOnlyMyHandle","mode","columnParams","profileContainer","profileBox","avatarBox","paramsBox","ButtonGroup","onlyMyFilter","Typography","gutterBottom","Slider","newRange","valueLabelDisplay","aria-labelledby","Array","columnContent","searchPacks","tableBox","pack","__v","rating","shots","tableSettings","curPage","paramsName","Number","pcValue","Card","toFixed","Table","items","tableHeader","item","Cards","PATH","App","err","preloader","app","appDark","exact","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","createMuiTheme","typography","htmlFontSize","overrides","MuiInputBase","root","ReactDOM","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.54a8aff5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2gn6p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardPage\":\"CardPage_cardPage__20g_s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1yUk2\"};","import axios from 'axios';\r\nimport {PacksParamsType} from '../redux/PacksReducer/PacksReducer';\r\nimport {CardsParamsType} from '../redux/cardsReducer/CardsReducer';\r\n\r\nconst cardsRequest = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true\r\n})\r\nexport type ProfileResponseType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    error?: string;\r\n}\r\nexport type packType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    name: string\r\n    path: string\r\n    cardsCount: number\r\n    grade: number\r\n    shots: number // количество попыток\r\n    rating: number // лайки\r\n    type: string // ещё будет \"folder\" (папка)\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n}\r\nexport type packsResponse = {\r\n    cardPacks: packType[]\r\n    cardPacksTotalCount: number // количество колод\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number // выбранная страница\r\n    pageCount: number // количество элементов на странице\r\n}\r\nexport type cardType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string | undefined\r\n}\r\nexport type  cardsResponseType =  {\r\n    cards: cardType[]\r\n    cardsTotalCount: number\r\n    maxGrade:number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\nexport type serverResponseType = {\r\n    info: string\r\n    error: string;\r\n}\r\n\r\n\r\n// export const pingAPI = {\r\n//     pingBack() {\r\n//        return   cardsRequest.get<number>(`/ping?frontTime=${Date.now()}`) //\r\n//\r\n//     }\r\n// }\r\n\r\nexport const authAPI = {\r\n    registration(email: string, password: string) {\r\n        return cardsRequest.post(`/auth/register/`, {email, password})\r\n            .then(res => res.data)\r\n    },\r\n    logIn(email: string, password: string, rememberMe: boolean) {\r\n        return cardsRequest.post<ProfileResponseType>(`/auth/login`, {email, password, rememberMe})\r\n            .then(res => res.data)\r\n    },\r\n    me() {\r\n        return cardsRequest.post<ProfileResponseType>(`/auth/me`, {})\r\n            .then(res => res.data)\r\n    },\r\n    logOut(){\r\n        return cardsRequest.delete<serverResponseType>(`/auth/me`)\r\n            .then(res => res.data)\r\n    },\r\n    updateMe(name: string, avatar?: string) {\r\n        return cardsRequest.put(`/auth/me`, {name, avatar})\r\n            .then(res => res.data)\r\n    },\r\n    updateAvatar(avatar: string) {\r\n        return cardsRequest.put(`/auth/me`, {avatar})\r\n            .then(res => res.data)\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return cardsRequest.post(`/auth/set-new-password`, {password, resetPasswordToken})\r\n            .then(res => res.data)\r\n    },\r\n    restorePassword(email: string,) {\r\n        const message = `\t\r\n\t            password recovery link: \r\n\t            <a href='http://localhost:3000/#/auth/change-password/$token$'>\r\n\t                link\r\n\t            </a>`\r\n        const fromUser = 'test-front-admin <valtika>'\r\n        return cardsRequest.post(`https://neko-back.herokuapp.com/2.0/auth/forgot`, {email, fromUser, message})\r\n            .then(res => res.data)\r\n    }\r\n\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(params?: PacksParamsType) {\r\n\r\n        return cardsRequest.get<packsResponse>('/cards/pack', {params})\r\n            .then(res => res.data)\r\n    },\r\n    getUserPacks(pageCount: number = 100, page: number = 1, user_id: string | undefined) {\r\n        return cardsRequest.get<packsResponse>(`/cards/pack?pageCount=${pageCount}&page=${page}&sortPacks=0updated&user_id=${user_id}`)\r\n            .then(res => res.data)\r\n    },\r\n    createPack() {\r\n        return cardsRequest.post<packsResponse>(`/cards/pack`, {\r\n            cardsPack: {\r\n                name: \"new pack 2.0\",\r\n            }\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n    deletePack(id: string) {\r\n        return cardsRequest.delete(`/cards/pack?id=${id}`)\r\n            .then(res => res.data)\r\n    },\r\n    updatePack(id: string, name: string) {\r\n        return cardsRequest.put(`/cards/pack`, {\r\n            cardsPack: {\r\n                _id: id,\r\n                name,\r\n            }\r\n        })\r\n            .then(res => res.data)\r\n    }\r\n}\r\nexport const cardsAPI = {\r\n    getCards(params: CardsParamsType) {\r\n        return cardsRequest.get<cardsResponseType>(`/cards/card`, {params})\r\n            .then(res => res.data)\r\n    },\r\n    createCard(cardsPack_id: string) {\r\n        return cardsRequest.post<packsResponse>(`/cards/card`,{cardsPack_id})\r\n            .then(res => res.data)\r\n    },\r\n    deleteCard() {\r\n        return cardsRequest.delete(`/cards/card`)\r\n            .then(res =>res.data)\r\n    },\r\n    updateCard(_id:string,name:string) {\r\n        return cardsRequest.put(`/cards/card`,{_id,name})\r\n            .then(res => res.data)\r\n    },\r\n    updateCardGrade(card_id: string, grade: number) {\r\n        return cardsRequest.put(`/cards/grade`, {card_id, grade})\r\n            .then(res => res.data)\r\n    }\r\n}\r\n","import {authAPI, ProfileResponseType} from '../../api/cards-api';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport const SET_PROFILE_DATA = 'profileReducer/SET-PROFILE-DATA' as const;\r\nexport const SET_PROFILE_UPDATE = 'profileReducer/SET_PROFILE_UPDATE' as const;\r\n\r\ntype InitialStateType = {\r\n    profile: null | ProfileResponseType\r\n}\r\n\r\nexport const initialState: InitialStateType = {\r\n    profile: null as ProfileResponseType | null,\r\n}\r\n\r\ntype PropertiesType<ActionType> = ActionType extends { [key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof profileActions>>\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_PROFILE_DATA: {\r\n            return ({\r\n                ...state,\r\n                profile: {...action.payload.data}\r\n            })\r\n        }\r\n        case SET_PROFILE_UPDATE: {\r\n            return ({\r\n                ...state,\r\n                profile: {...state.profile, ...action.payload.data}\r\n\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const profileActions = {\r\n    setProfileDataAC: (data: ProfileResponseType) => {\r\n        return ({\r\n            type: SET_PROFILE_DATA,\r\n            payload: {\r\n                data\r\n            }\r\n        })\r\n    },\r\n    setProfileUpdateAC: (data: any) => {\r\n        return({\r\n            type: SET_PROFILE_UPDATE,\r\n            payload: {\r\n                data\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const changeProfileNameTC = (name: string) => (dispatch: Dispatch) => {\r\n    authAPI.updateMe(name)\r\n        .then(data => {\r\n            profileActions.setProfileUpdateAC(data)\r\n        })\r\n}\r\nexport const updateProfileAvatarTC = (avatar: any) => (dispatch: Dispatch) => {\r\n    authAPI.updateAvatar(avatar)\r\n        .then(data => {\r\n            profileActions.setProfileUpdateAC(data)\r\n        })\r\n}\r\n\r\n\r\nexport default profileReducer;","export const STATUS = 'appReducer/SET-STATUS' as const;\r\nexport const ERROR = 'appReducer/SET-ERROR' as const;\r\nexport const INITIALIZING = 'appReducer/SET-INITIALIZING' as const;\r\nexport const THEME = 'appReducer/SET-THEME' as const;\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string\r\n    initializing: boolean\r\n    theme:'light' | 'dark'\r\n}\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: '',\r\n    initializing: false,\r\n    theme:'light'\r\n}\r\n\r\n\r\ntype PropertiesType<ActionType> = ActionType extends { [key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof appActions>>\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZING: {\r\n            return ({\r\n                ...state,\r\n                initializing: action.payload.value\r\n            })\r\n        }\r\n        case ERROR: {\r\n            return ({\r\n                ...state,\r\n                error: action.payload.error\r\n            })\r\n        }\r\n        case STATUS: {\r\n            return ({\r\n                ...state,\r\n                status: action.payload.status\r\n            })\r\n        }\r\n        case THEME:{\r\n            return ({\r\n                ...state,\r\n                theme:action.payload.theme\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const appActions = {\r\n    setAppErrorAC(error: string) {\r\n        return ({\r\n            type: ERROR,\r\n            payload: {\r\n                error\r\n            }\r\n        })\r\n    },\r\n    setAppStatusAC(status: RequestStatusType) {\r\n        return ({\r\n            type: STATUS,\r\n            payload: {\r\n                status\r\n            }\r\n        })\r\n    },\r\n    setInitializingAC(value: boolean) {\r\n        return ({\r\n            type: INITIALIZING,\r\n            payload: {\r\n                value\r\n            }\r\n        })\r\n    },\r\n    setThemeAC(theme: 'light' | 'dark') {\r\n        return ({\r\n            type: THEME,\r\n            payload: {\r\n                theme\r\n            }\r\n        })\r\n    },\r\n}\r\n\r\n\r\n\r\nexport default appReducer;\r\n","import {authAPI} from '../../api/cards-api';\r\nimport {Dispatch} from \"redux\";\r\nimport {profileActions} from '../profileReducer/profileReducer';\r\nimport {appActions} from '../appReducer/appReducer';\r\n\r\nexport const LOGIN_FLOW = 'authReducer/SET-LOGIN-FLOW' as const;\r\nexport const ERROR = 'authReducer/SET-ERROR' as const;\r\nexport const INFO = 'authReducer/SET-INFO' as const;\r\n\r\n\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n    error: string\r\n    info: string\r\n}\r\n\r\nexport const initialState: InitialStateType = {\r\n    isLoggedIn: false,\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\ntype PropertiesType<ActionType> = ActionType extends { [key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof authActions>>\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case LOGIN_FLOW: {\r\n            return ({\r\n                ...state,\r\n                isLoggedIn: action.payload.isLoggedIn\r\n            })\r\n        }\r\n        case ERROR: {\r\n            return ({\r\n                ...state,\r\n                error: action.payload.error\r\n            })\r\n        }\r\n        case INFO: {\r\n            return ({\r\n                ...state,\r\n                info: action.payload.info\r\n            })\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const authActions = {\r\n\r\n    loginFlowAC: (isLoggedIn: boolean) => {\r\n        return ({\r\n            type: LOGIN_FLOW,\r\n            payload: {\r\n                isLoggedIn\r\n            } as InitialStateType,\r\n        })\r\n    },\r\n\r\n    errorAC: (error: string) => {\r\n        return ({\r\n            type: ERROR,\r\n            payload: {\r\n                error\r\n            } as InitialStateType,\r\n        })\r\n    },\r\n    infoAC: (info: string) => {\r\n        return ({\r\n            type: INFO,\r\n            payload: {\r\n                info\r\n            } as InitialStateType,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe?: boolean) => (dispatch: any) => {\r\n    dispatch(appActions.setInitializingAC(true))\r\n    authAPI.logIn(email, password, rememberMe = true)\r\n        .then(data => {\r\n            dispatch(profileActions.setProfileDataAC(data))\r\n            dispatch(authActions.loginFlowAC(true))\r\n            dispatch(appActions.setAppErrorAC(''))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(authActions.loginFlowAC(false))\r\n            dispatch(authActions.errorAC(error.message))\r\n        })\r\n        .finally(() => {\r\n            dispatch(appActions.setInitializingAC(false))\r\n        })\r\n}\r\nexport const LogoutTC = () => (dispatch: any) => {\r\n    dispatch(appActions.setInitializingAC(true))\r\n    authAPI.logOut()\r\n        .then((data) => {\r\n            dispatch(authActions.loginFlowAC(false))\r\n            dispatch(authActions.infoAC(data.info))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(authActions.errorAC(error.error))\r\n            dispatch(authActions.loginFlowAC(false))\r\n        })\r\n        .finally(() => {\r\n            dispatch(appActions.setInitializingAC(false))\r\n        })\r\n}\r\n\r\nexport const authMeTC = () => (dispatch: Dispatch) => {\r\n    dispatch(appActions.setInitializingAC(true))\r\n    authAPI.me()\r\n        .then(data => {\r\n            dispatch(profileActions.setProfileDataAC(data))\r\n            dispatch(authActions.loginFlowAC(true))\r\n        })\r\n        .catch(err => {\r\n            dispatch(authActions.errorAC(err.message))\r\n            dispatch(authActions.loginFlowAC(false))\r\n        })\r\n        .finally(() => {\r\n            dispatch(appActions.setInitializingAC(false))\r\n        })\r\n}\r\n\r\n\r\nexport default authReducer;\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport styles from './Navigation.module.css';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport {Button, FormControlLabel, FormGroup, Switch} from '@material-ui/core';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {LogoutTC} from '../../../redux/authReducer/authReducer';\r\nimport {AppStateType} from '../../../redux/store';\r\nimport { appActions } from '../../../redux/appReducer/appReducer';\r\n\r\nconst Navigation = (props: any) => {\r\n    const userName = useSelector<AppStateType,string | undefined>(state => state.profileReducer.profile?.email)\r\n    const isLoggerIn = useSelector<AppStateType,boolean>(state => state.authReducer.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n\r\n    let [tempState, setTempState] = useState( [\r\n\r\n        {name: 'Login', path: 'auth/login'},\r\n        {name: 'Registration', path: 'auth/registration'},\r\n        {name: 'Restore Password', path: 'auth/restore-password'},\r\n        {name: 'Change Password', path: 'auth/change-password'},\r\n        {name: 'Packs', path: 'packs'},\r\n        {name: 'Profile', path: 'profile'}]);\r\n\r\n    let navLinks = tempState.map((link:{name: string, path:string}, index:number) => {\r\n        return <li key={index} className={styles.navLinkItem}>\r\n            <NavLink to={`/${(link.path).toLowerCase()}`} className={styles.menuLink} activeClassName={styles.menuLinkActive}>\r\n                <span>{link.name}</span>\r\n            </NavLink>\r\n        </li>\r\n    })\r\n\r\n    const onClickLogoutHandler = () => {\r\n        dispatch(LogoutTC())\r\n    }\r\n    const [theme, setTheme] = useState<'light' | 'dark'>('dark');\r\n\r\n    const toggleTheme =  () => {\r\n        if (theme === 'light') {\r\n             setTheme('dark');\r\n            dispatch(appActions.setThemeAC(theme))\r\n        } else {\r\n             setTheme('light');\r\n             dispatch(appActions.setThemeAC(theme))\r\n        }\r\n    }\r\n\r\n\r\n    return <ul className={styles.navList}>\r\n\r\n        {navLinks}\r\n        <FormGroup>\r\n            <FormControlLabel\r\n                control={<Switch size={\"medium\"} onClick={toggleTheme} />}\r\n                label=\"Change Theme\"\r\n            />\r\n        </FormGroup>\r\n        {isLoggerIn && <><div>{userName}</div> <Button variant=\"contained\" color=\"primary\" onClick={onClickLogoutHandler}>\r\n            Logout\r\n        </Button></>}\r\n\r\n    </ul>\r\n}\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport Navigation from './Navigation/Navigation';\r\nimport styles from './Header.module.css';\r\n\r\nconst Header = (props: any) => {\r\n    return <div className={styles.header}>\r\n        <Navigation/>\r\n    </div>\r\n}\r\n\r\nexport default Header;\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { ProfileResponseType } from '../../../api/cards-api';\r\nimport { changeProfileNameTC } from '../../../redux/profileReducer/profileReducer';\r\nimport {AppStateType} from '../../../redux/store';\r\n\r\n\r\nconst Profile = () => {\r\n\r\n    const profile = useSelector<AppStateType, ProfileResponseType | null>( state => state.profileReducer.profile);\r\n    const isLoggedIn = useSelector<AppStateType, boolean | null>( state => state.authReducer.isLoggedIn);\r\n    let [name, setName] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const onChangeNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.currentTarget.value)\r\n    }\r\n    const onClickChangeNameHandler = () => {\r\n        dispatch(changeProfileNameTC(name))\r\n    }\r\n\r\n    if(!isLoggedIn) {\r\n        return  <Redirect to={'auth/login'}/>\r\n    }\r\n\r\n    return <div className='profile'>\r\n        <div>\r\n            <ul>\r\n                <li> <span>{profile !== null ? profile.email : 'not authorized'}</span></li>\r\n                <li>\r\n                    <input value={name} onChange={onChangeNameHandler} onKeyPress={(e)=> (e.key === 'Enter' && onClickChangeNameHandler())}/>\r\n                    <span>{profile !== null && profile.name}</span>\r\n                    <button onClick={onClickChangeNameHandler}>Change Name!</button>\r\n                </li>\r\n                <li>3</li>\r\n                <li>4</li>\r\n                <li>5</li>\r\n            </ul>\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react'\r\nimport './404.css'\r\n\r\nexport const PageNotFounded = () => {\r\n    return (\r\n        <div className={`wrapper`}>\r\n            <div className=\"face\">\r\n                <div className=\"band\">\r\n                    <div className=\"red\"></div>\r\n                    <div className=\"white\"></div>\r\n                    <div className=\"blue\"></div>\r\n                </div>\r\n                <div className=\"eyes\"></div>\r\n                <div className=\"dimples\"></div>\r\n                <div className=\"mouth\"></div>\r\n            </div>\r\n\r\n            <h1 className={`text`}>Oops! Something went wrong!</h1>\r\n            <div className=\"btn\">Return to Home</div>\r\n        </div>\r\n\r\n\r\n    )\r\n}","import React, {ChangeEvent, FC, useState} from 'react'\r\nimport {IconButton, Input, InputAdornment} from \"@material-ui/core\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\n\r\ninterface inputType {\r\n    color?: \"primary\" | \"secondary\"\r\n    id:string\r\n    value:string\r\n    onChange:(e:ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void\r\n    position:'end'|'start'\r\n    name?:string\r\n}\r\nexport const FormikCustomInput:FC<inputType> = ({id,value,color,onChange,position,name}) => {\r\n    let [isBlind, setIsBlind] = useState(true)\r\n    const eyeToggle = () => {\r\n        setIsBlind(!isBlind)\r\n    }\r\n\r\n    return (\r\n        <Input\r\n            color={color}\r\n            id={id}\r\n            type={isBlind ? 'password' : 'text'}\r\n            value={value}\r\n            name={name ? name : id}\r\n            onChange={onChange}\r\n            endAdornment={\r\n                <InputAdornment position={position}>\r\n                    <IconButton\r\n                        aria-label={\"toggle password visibility\"}\r\n                        onClick={eyeToggle}\r\n                    >\r\n                        {isBlind ? <VisibilityOff/> : <Visibility/>}\r\n                    </IconButton>\r\n                </InputAdornment>\r\n            }\r\n        />\r\n    )\r\n}\r\n","import React, {FC} from 'react'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormHelperText, Input, InputLabel} from \"@material-ui/core\";\r\nimport {FormikCustomInput} from \"../../../common/Input/input\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {loginTC} from \"../../../../redux/authReducer/authReducer\";\r\nimport {Favorite, FavoriteBorder} from \"@material-ui/icons\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\ntype FormPropsType = {\r\n    styles:any\r\n\r\n}\r\nexport const LoginForm:FC<FormPropsType> = ({styles}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'collabincubator@gmail.com',\r\n            password: 'collaborators',\r\n            rememberMe:true,\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'password is required';\r\n            } else if (values.password.length <= 7) {\r\n                errors.password = 'password must be at least 7 letters long';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values.email, values.password, values.rememberMe))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <FormControl {...formik.getFieldProps('email')}\r\n                         error={!!formik.errors.email}\r\n                         className={styles.controlInputs}>\r\n                <InputLabel htmlFor=\"email\">Email</InputLabel>\r\n                <Input\r\n                    {...formik.getFieldProps('email')}\r\n                    id={\"email\"}\r\n                    value={formik.values.email}\r\n                    onChange={formik.handleChange}\r\n                    aria-describedby={'email-error'}/>\r\n                {!!formik.errors.email && <FormHelperText id=\"email-error\">{formik.errors.email}</FormHelperText>}\r\n            </FormControl>\r\n            <FormControl {...formik.getFieldProps('password')}\r\n                         error={!!formik.errors.password}\r\n                         className={styles.controlInputs}>\r\n                <InputLabel htmlFor={\"password\"}>Password</InputLabel>\r\n                <FormikCustomInput\r\n                    color={'primary'}\r\n                    id={\"password\"}\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.password}\r\n                    position='end'/>\r\n                {!!formik.errors.password &&\r\n                <FormHelperText id=\"password-error\">{formik.errors.password}</FormHelperText>}\r\n            </FormControl>\r\n            <FormControlLabel\r\n                control={<Checkbox icon={<FavoriteBorder />} checkedIcon={<Favorite />} name=\"rememberMe\"  value={formik.values.rememberMe} />}\r\n                label=\"Remember me\"\r\n            />\r\n            <div className={styles.forgotBox}>\r\n                <NavLink className={styles.navLinkForgotBox} to={'/auth/restore-password'}>\r\n                    <span>Forgot Password</span>\r\n                </NavLink>\r\n            </div>\r\n            <Button disabled={false} type={'submit'} className={styles.formButtons} variant=\"contained\"\r\n                    color=\"primary\">\r\n                Login\r\n            </Button>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector} from 'react-redux';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {AppStateType} from '../../../redux/store';\r\nimport {LoginForm} from \"./LoginForm/loginForm\";\r\nimport {CustomCheckbox} from \"../../common/checkbox/checkbox\";\r\nimport {Switch} from \"../../common/switch/switch\";\r\nimport {Checkbox, FormControlLabel} from \"@material-ui/core\";\r\nimport {Favorite, FavoriteBorder} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    styles: any\r\n}\r\n\r\nexport const Login: React.FC<PropsType> = ({styles, ...props}) => {\r\n\r\n    return (\r\n        <>\r\n            <h1>Cards</h1>\r\n            <h2>Sign In</h2>\r\n            <LoginForm\r\n                styles={styles}/>\r\n\r\n            <div className={styles.footerBox}>\r\n                <p>Don't have an account?</p>\r\n                <NavLink to={'registration'} className={styles.footerLink}>\r\n                    <span>Sign Up</span>\r\n                </NavLink>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Login;\r\n","import {authAPI} from \"../../api/cards-api\";\r\n\r\nexport const SUCCESS = 'registrationReducer/SUCCESS' as const\r\nexport const LOADING = 'registrationReducer/LOADING'as const\r\nexport const ERROR = 'registrationReducer/ERROR'as const\r\n\r\n\r\ntype InitialStateType = {\r\n\r\n    loading:boolean\r\n    error:string\r\n    registrationSuccess: boolean\r\n}\r\nconst initialState = {\r\n    registrationSuccess:false,\r\n    loading:false,\r\n    error:''\r\n}\r\ntype PropertiesType<ActionType> = ActionType extends {[key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof registrationActions>>\r\n\r\nconst registrationReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case SUCCESS: {\r\n            return {\r\n                ...state,\r\n                registrationSuccess: action.payload.registrationSuccess\r\n            }\r\n        }\r\n        case LOADING: {\r\n            return {\r\n                ...state,\r\n                error:'',\r\n                loading:action.payload.loading,\r\n                registrationSuccess:false\r\n            }\r\n        }\r\n        case ERROR: {\r\n            return {\r\n                ...state,\r\n                error:action.payload.error,\r\n                loading:false,\r\n                registrationSuccess:false\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const registrationActions = {\r\n    registrationAC: (registrationSuccess:boolean) => {\r\n        // data:addedUserType,\r\n        return ({\r\n            type: SUCCESS,\r\n            payload: {\r\n                // data,\r\n                registrationSuccess: registrationSuccess\r\n            }\r\n        })\r\n    },\r\n    registrationLoadingAC: (loading:boolean) => {\r\n        return({\r\n            type:LOADING,\r\n            payload : {\r\n                loading\r\n            }\r\n        })\r\n    },\r\n    registrationErrorAC: (error:string) => {\r\n        return({\r\n            type:ERROR,\r\n            payload : {\r\n                error\r\n            }\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const RegistrationTC = (email: string, password: string) => (dispatch: any) => {\r\n\r\n        dispatch(registrationActions.registrationLoadingAC(true))\r\n        authAPI.registration(email, password)\r\n            .then((data) => {\r\n                dispatch(registrationActions.registrationAC(true))\r\n                dispatch(registrationActions.registrationLoadingAC(false))\r\n            })\r\n            .catch((error) => {\r\n                dispatch(registrationActions.registrationErrorAC('error'))\r\n                console.log('error')\r\n            })\r\n\r\n}\r\n\r\nexport default registrationReducer;","import React, {FC} from 'react'\r\nimport {Button, FormControl, FormHelperText, Input, InputLabel} from \"@material-ui/core\";\r\nimport {FormikCustomInput} from \"../../../common/Input/input\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {RegistrationTC} from \"../../../../redux/registrationReducer/registrationReducer\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    passwordConfirm?: string\r\n}\r\ntype registrationFormType ={\r\n    styles:any\r\n}\r\nexport const RegistrationForm:FC<registrationFormType> = ({styles}) => {\r\n    const history = useHistory()\r\n    const onClickBack = () => {\r\n        history.goBack()\r\n    }\r\n    const dispatch = useDispatch();\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            passwordConfirm: ''\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'password is required';\r\n            } else if (values.password.length <= 7) {\r\n                errors.password = 'password must be at least 7 letters long';\r\n            }\r\n            if (values.password !== values.passwordConfirm) {\r\n                errors.passwordConfirm = 'passwords are not match'\r\n                errors.password = 'passwords are not match'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(RegistrationTC(values.email, values.password))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <FormControl {...formik.getFieldProps('email')}\r\n                         error={!!formik.errors.email}\r\n                         className={styles.controlInputs}>\r\n                <InputLabel htmlFor=\"email\">Email</InputLabel>\r\n                <Input id={\"email\"} value={formik.values.email} onChange={formik.handleChange} />\r\n                {!!formik.errors.email && <FormHelperText id=\"email\">{formik.errors.email}</FormHelperText>}\r\n            </FormControl>\r\n            <FormControl {...formik.getFieldProps('password')}\r\n                         error={!!formik.errors.password}\r\n                         className={styles.controlInputs}>\r\n                <InputLabel htmlFor={\"password\"}>Password</InputLabel>\r\n\r\n                <FormikCustomInput color={'primary'} id={'password'}\r\n                                   value={formik.values.password} onChange={formik.handleChange}\r\n                                   position={'end'}/>\r\n                {!!formik.errors.password &&\r\n                <FormHelperText id=\"password\">{formik.errors.password}</FormHelperText>}\r\n            </FormControl>\r\n\r\n            <FormControl {...formik.getFieldProps('passwordConfirm')}\r\n                         error={!!formik.errors.password}\r\n                         className={styles.controlInputs}>\r\n                <InputLabel htmlFor={\"passwordConfirm\"}>Confirm password</InputLabel>\r\n                <FormikCustomInput color={'primary'} id={'passwordConfirm'}\r\n                                   value={formik.values.passwordConfirm} onChange={formik.handleChange}\r\n                                   position={'end'}/>\r\n                {!!formik.errors.password &&\r\n                <FormHelperText id=\"passwordConfirm\">{formik.errors.password}</FormHelperText>}\r\n            </FormControl>\r\n            <div className={styles.btnContainer}>\r\n                <Button disabled={false} type={'button'} variant={\"contained\"}\r\n                        className={styles.formButtons}\r\n                        onClick={onClickBack}>\r\n                    Login\r\n                </Button>\r\n                <Button disabled={false} type={'submit'} variant={\"contained\"}\r\n                        className={styles.formButtons}\r\n                        color=\"primary\" >\r\n                    Login\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector} from \"react-redux\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from \"../../../redux/store\";\r\nimport {RegistrationForm} from \"./registrationForm/registrationForm\";\r\n\r\ntype PropsType = {\r\n    styles: any\r\n}\r\n\r\nconst Registration: React.FC<PropsType> = ({styles}) => {\r\n    const success = useSelector<AppStateType,boolean>(state => state.registrationReducer.registrationSuccess)\r\n\r\n\r\n    if(success) {\r\n        return <Redirect to={'/auth/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Cards</h1>\r\n            <h2>Sign Up</h2>\r\n            <RegistrationForm styles={styles}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Registration;\r\n","export default __webpack_public_path__ + \"static/media/mail-circle-icon.bc3a4042.svg\";","import React from 'react'\r\nimport emailCircleIcon from '../../../assets/img/svg/mail-circle-icon.svg';\r\n\r\ntype PropsType = {\r\n    styles: any\r\n}\r\n\r\nexport const CheckEmail: React.FC<PropsType> = ({styles, ...props}) => {\r\n    return (\r\n        <>\r\n            <h1>Cards</h1>\r\n            <img src={emailCircleIcon} alt={'email-circle-icon'} className={styles.imgSuccessAction} />\r\n            <h2>Check Email</h2>\r\n            <p>\r\n                We’ve sent an Email with instructions to example@mail.com\r\n            </p>\r\n        </>\r\n    )\r\n}","import {authAPI} from \"../../api/cards-api\";\r\n\r\nconst RESTORE = 'restoreReducer/RESTORE' as const;\r\nconst ERROR = 'restoreReducer/ERROR' as const;\r\nconst LOADING = 'restoreReducer/LOADING' as const;\r\n\r\ntype InitialStateType = {\r\n    email: boolean\r\n    error: string\r\n    loading: boolean\r\n}\r\n\r\ntype PropertiesType<ActionType> = ActionType extends { [key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof restoreActions>>\r\n\r\n\r\nexport const initialState: InitialStateType = {\r\n    email: false,\r\n    error: '',\r\n    loading: false,\r\n}\r\n\r\nconst restorePassReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case RESTORE : {\r\n            return ({\r\n                ...state,\r\n                email: action.payload.email,\r\n                loading: false,\r\n                error: ''\r\n            })\r\n\r\n        }\r\n        case ERROR : {\r\n            return ({\r\n                ...state,\r\n                email: false,\r\n                loading: false,\r\n                error: action.payload.error\r\n            })\r\n\r\n        }\r\n        case LOADING : {\r\n            return ({\r\n                ...state,\r\n                email: false,\r\n                loading: action.payload.loading,\r\n                error: ''\r\n            })\r\n\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const restoreActions = {\r\n    restoreEmailSuccessAC(email: boolean) {\r\n        return ({\r\n            type: RESTORE,\r\n            payload: {\r\n                email,\r\n            }\r\n        })\r\n    },\r\n    restoreEmailLoadingAC(loading: boolean) {\r\n        return ({\r\n            type: LOADING,\r\n            payload: {\r\n                loading,\r\n            }\r\n        })\r\n    },\r\n    restoreEmailErrorAC(error: string) {\r\n        return ({\r\n            type: ERROR,\r\n            payload: {\r\n                error,\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const RestoreMailTC = (email: string) => (dispatch: any) => {\r\n    dispatch(restoreActions.restoreEmailLoadingAC(true))\r\n    authAPI.restorePassword(email)\r\n        .then(data => {\r\n            console.log(data.info)\r\n            dispatch(restoreActions.restoreEmailSuccessAC(true))\r\n        }).catch((error) => {\r\n        dispatch(restoreActions.restoreEmailErrorAC('error'))\r\n        console.log('error')\r\n    })\r\n\r\n}\r\nexport default restorePassReducer;","import React, { FC } from 'react'\r\nimport {Button, FormControl, FormHelperText, Input, InputLabel} from \"@material-ui/core\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport {RestoreMailTC} from \"../../../../redux/restorePassReducer/restorePassReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype FormikErrorType = {\r\n    emailForRestore?: string\r\n}\r\ntype restorePassType = {\r\n    styles:any\r\n}\r\n\r\nexport const RestorePassForm:FC<restorePassType> = ({styles}) => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            emailForRestore: 'vvvvv',\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.emailForRestore) {\r\n                errors.emailForRestore = 'email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.emailForRestore)) {\r\n                errors.emailForRestore = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(RestoreMailTC(values.emailForRestore))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <h1>Cards</h1>\r\n            <h2>Forgot your password?</h2>\r\n            <FormControl className={styles.controlInputs}\r\n                         error={!!formik.errors.emailForRestore}\r\n                         {...formik.getFieldProps('emailForRestore')}>\r\n                <InputLabel htmlFor={\"emailForRestore\"}>Enter your email</InputLabel>\r\n                <Input id={\"emailForRestore\"}\r\n                       value={formik.values.emailForRestore}\r\n                       onChange={formik.handleChange}\r\n                       />\r\n            </FormControl>\r\n            {!!formik.errors.emailForRestore && <FormHelperText id=\"emailForRestore\">{formik.errors.emailForRestore}</FormHelperText>}\r\n\r\n            <p>\r\n                Enter your email address and we will send you further instructions\r\n            </p>\r\n            <Button disabled={false} type={'submit'}\r\n                    className={styles.formButtons}\r\n                    variant={\"contained\"}\r\n                    color={\"primary\"}\r\n            >\r\n                Send Instructions\r\n            </Button>\r\n            <div className={styles.footerBox}>\r\n                <p>Did you remember your password?</p>\r\n                <NavLink to={'registration'} className={styles.footerLink}>\r\n                    <span>Sign Up</span>\r\n                </NavLink>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\nimport {CheckEmail} from \"../Registration/CheckEmail\";\r\nimport {RestorePassForm} from \"./restorePassForm/RestorePassForm\";\r\n\r\ntype PropsType = {\r\n    styles: any\r\n}\r\n\r\nconst RestorePass: React.FC<PropsType> = ({styles, ...props}) => {\r\n    const email = useSelector<AppStateType,boolean>(state => state.restorePassReducer.email)\r\n\r\n    return (\r\n        <>\r\n            {email ? <CheckEmail styles={styles}/>\r\n                :\r\n                <>\r\n                    <RestorePassForm styles={styles}/>\r\n                </>\r\n            }</>\r\n    )\r\n}\r\n\r\nexport default RestorePass;\r\n","import {authAPI} from \"../../api/cards-api\";\r\n\r\nexport const CHANGE_PASS: string = 'changePassreducer/CHANGE_PASS';\r\n\r\n\r\nconst CHANGE = 'changePasswordReducer/CHANGE' as const;\r\nconst ERROR = 'changePasswordReducer/ERROR' as const;\r\nconst LOADING = 'changePasswordReducer/LOADING' as const;\r\n\r\n\r\ntype InitialStateType = {\r\n    successChangePass:boolean\r\n    loading:boolean\r\n    error:string\r\n}\r\n\r\ntype PropertiesType<ActionType> = ActionType extends {[key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof changePassActions>>\r\n\r\n\r\nexport const initialState: InitialStateType =  {\r\n    successChangePass:false,\r\n    loading:false,\r\n    error:''\r\n}\r\n\r\nconst changePassReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case CHANGE: {\r\n            return ({\r\n                ...state,\r\n                successChangePass:action.payload.success,\r\n                loading:false,\r\n                error:''\r\n            })\r\n        }\r\n        case ERROR: {\r\n            return ({\r\n                ...state,\r\n                successChangePass:false,\r\n                loading:false,\r\n                error:action.payload.error\r\n            })\r\n        }\r\n        case LOADING: {\r\n            return ({\r\n                ...state,\r\n                successChangePass:false,\r\n                loading:action.payload.loading,\r\n                error:''\r\n            })\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const changePassActions = {\r\n    successChangePassAC (success:boolean) {\r\n        return ({\r\n            type:CHANGE,\r\n            payload: {\r\n                success\r\n            }\r\n        })\r\n    },\r\n    loadingAC (loading:boolean) {\r\n        return ({\r\n            type:LOADING,\r\n            payload: {\r\n                loading\r\n            }\r\n        })\r\n    },\r\n    errorAC (error:string) {\r\n        return ({\r\n            type:ERROR,\r\n            payload: {\r\n                error\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const RestorePassTC = (password:string,resetPasswordToken:string) => (dispatch: any) => {\r\n        dispatch(changePassActions.loadingAC(true))\r\n        authAPI.setNewPassword(password,resetPasswordToken)\r\n            .then( data => {\r\n                console.log(`${data.data.info}`)\r\n               dispatch(changePassActions.successChangePassAC(true))\r\n                dispatch(changePassActions.loadingAC(false))\r\n            }).catch((error)=>{\r\n            dispatch(changePassActions.errorAC('error'))\r\n        })\r\n}\r\n\r\nexport default changePassReducer;","import React, {FC} from 'react'\r\nimport {Button, FormControl, FormHelperText, InputLabel} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {FormikCustomInput} from \"../../../common/Input/input\";\r\nimport {RestorePassTC} from \"../../../../redux/changePassReducer/changePassReducer\";\r\n\r\ntype FormPropsType = {\r\n    styles: any\r\n}\r\ntype FormikErrorType = {\r\n    password?: string\r\n    repeatPassword?: string\r\n    passwordLength?:string\r\n}\r\n\r\nexport const ChangePassForm: FC<FormPropsType> = ({styles, ...props}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const {token} = useParams<{ token: string }>()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            repeatPassword: '',\r\n\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!(values.password && values.repeatPassword)) {\r\n                errors.password = 'password is required';\r\n            } else if (values.password !== values.repeatPassword) {\r\n                errors.repeatPassword = 'passwords are not match'\r\n                errors.password = 'passwords are not match'\r\n            } else if (!(values.password.length <= 7 && values.repeatPassword.length <=7)) {\r\n                errors.passwordLength = 'passwords should be more then 7 symbols'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(RestorePassTC(values.password, token))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <FormControl\r\n                error={!!formik.errors.password }\r\n                {...formik.getFieldProps('password')}\r\n                className={styles.controlInputs}>\r\n                <InputLabel htmlFor={\"password\"}>Password</InputLabel>\r\n                <FormikCustomInput color={'primary'} id={'password'} name={'password'} value={formik.values.password}\r\n                                   onChange={formik.handleChange} position={'end'}/>\r\n            </FormControl>\r\n            <FormControl\r\n                {...formik.getFieldProps('repeatPassword')}\r\n                error={!!formik.errors.repeatPassword }\r\n                className={styles.controlInputs}>\r\n                <InputLabel htmlFor={\"repeatPassword\"}>Repeat password</InputLabel>\r\n                <FormikCustomInput color={'primary'} name={'repeatPassword'}  id={'repeatPassword'}\r\n                                   value={formik.values.repeatPassword}\r\n                                   onChange={formik.handleChange} position={'end'}/>\r\n                {formik.errors.repeatPassword && <FormHelperText id=\"repeatPassword\">{formik.errors.repeatPassword}</FormHelperText>}\r\n            </FormControl>\r\n            <Button type={'submit'} className={styles.formButtons} variant=\"contained\"\r\n                    color=\"primary\"\r\n            >\r\n                Change pass\r\n            </Button>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/store\";\r\nimport {ChangePassForm} from \"../ChangePassForm/ChangePassForm\";\r\n\r\ntype PropsType = {\r\n    styles: any\r\n}\r\n\r\nconst ChangePass: React.FC<PropsType> = ({styles, ...props}) => {\r\n\r\n    const success = useSelector<AppStateType, boolean>(state => state.changePassReducer.successChangePass)\r\n\r\n    if(success) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Cards</h1>\r\n            <h2>Sign Up</h2>\r\n            <ChangePassForm\r\n                styles={styles}\r\n            />\r\n            <p>\r\n                Create new password and we will send you further instructions to email\r\n            </p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChangePass;\r\n","export default __webpack_public_path__ + \"static/media/cybava.a68790ab.png\";","export default __webpack_public_path__ + \"static/media/camera.7c3e8d48.svg\";","import React, {ChangeEvent} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {useFormik} from 'formik';\r\nimport {FormControl, FormHelperText, Input, InputLabel} from '@material-ui/core';\r\nimport {AppStateType} from '../../../redux/store';\r\nimport {authAPI, ProfileResponseType} from '../../../api/cards-api';\r\nimport profileAvatar from './../../../assets/img/png/cybava.png';\r\nimport updateAvatarIcon from './../../../assets/icons/camera.svg';\r\nimport {updateProfileAvatarTC} from '../../../redux/profileReducer/profileReducer';\r\n\r\ntype PropsType = {\r\n    styles: any\r\n}\r\ntype FormikErrorType = {\r\n    nicknameForUpdate?: string\r\n    emailForUpdate?: string\r\n\r\n}\r\n\r\nexport const ProfileEdit: React.FC<PropsType> = ({styles, ...props}) => {\r\n    const dispatch = useDispatch()\r\n    const profile = useSelector<AppStateType, ProfileResponseType | null>(state => state.profileReducer.profile)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            nicknameForUpdate: profile?.name,\r\n            emailForUpdate: profile?.email\r\n\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.emailForUpdate) {\r\n                errors.emailForUpdate = 'email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.emailForUpdate)) {\r\n                errors.emailForUpdate = 'Invalid email address';\r\n            }\r\n            if (!values.nicknameForUpdate) {\r\n                errors.nicknameForUpdate = 'nicknameForUpdate is required';\r\n            } else if (values.nicknameForUpdate.length <= 2) {\r\n                errors.nicknameForUpdate = 'nicknameForUpdate must be at least 2 letters long';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    const onClickUpdateAvatarHandle = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        if (e.target.files?.length) {\r\n            dispatch(updateProfileAvatarTC(e.target.files?.[0]))\r\n        }\r\n        e.stopPropagation()\r\n\r\n    }\r\n\r\n    return (<>\r\n        <h2>Personal information</h2>\r\n        <div className={styles.imgProfileAvatarBox}>\r\n            <img src={profileAvatar} alt={'profile avatar'} className={styles.imgProfileAvatar}/>\r\n            <div className={styles.imgUpdateAvatarBox} >\r\n                <img src={updateAvatarIcon} alt=\"update avatar\" className={styles.imgUpdateAvatar}/>\r\n                <input type={'file'} onChange={onClickUpdateAvatarHandle}/>\r\n            </div>\r\n        </div>\r\n        <FormControl {...formik.getFieldProps('nicknameForUpdate')}\r\n                     error={!!formik.errors.nicknameForUpdate}\r\n                     className={styles.controlInputs}>\r\n            <InputLabel htmlFor='nicknameForUpdate'>Nickname</InputLabel>\r\n            <Input\r\n                {...formik.getFieldProps('nicknameForUpdate')}\r\n                id={\"nicknameForUpdate\"}\r\n                value={formik.values.nicknameForUpdate}\r\n                onChange={formik.handleChange}\r\n                aria-describedby={'nicknameForUpdate-error'}/>\r\n            {!!formik.errors.nicknameForUpdate &&\r\n            <FormHelperText id='nicknameForUpdate-error'>{formik.errors.nicknameForUpdate}</FormHelperText>}\r\n        </FormControl>\r\n\r\n        <FormControl {...formik.getFieldProps('emailForUpdate')}\r\n                     error={!!formik.errors.emailForUpdate}\r\n                     className={styles.controlInputs}>\r\n            <InputLabel htmlFor={'emailForUpdate'}>Email</InputLabel>\r\n            <Input id={'emailForUpdate'}\r\n                   value={formik.values.emailForUpdate}\r\n                   onChange={formik.handleChange}\r\n            />\r\n        </FormControl>\r\n            {!!formik.errors.emailForUpdate &&\r\n            <FormHelperText id='emailForUpdate-error'>{formik.errors.emailForUpdate}</FormHelperText>}\r\n\r\n    </>)\r\n}","import React from 'react';\r\nimport styles from '../Auth/Auth.module.scss';\r\nimport {Switch, Route, Redirect} from 'react-router-dom';\r\nimport Login from '../Login/Login';\r\nimport Registration from '../Registration/Registration';\r\nimport RestorePass from '../RestorePass/RestorePass';\r\nimport ChangePass from '../ChangePass/ChangePass/ChangePass';\r\nimport {useSelector} from \"react-redux\";\r\nimport { AppStateType } from '../../../redux/store';\r\nimport classNames from \"classnames\";\r\nimport {ProfileEdit} from '../ProfileEdit/ProfileEdit';\r\n\r\n\r\nexport const Auth: React.FC = (props) => {\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.authReducer.isLoggedIn)\r\n    const theme = useSelector<AppStateType, 'light'|'dark'>(state => state.appReducer.theme);\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={classNames(styles.box,({\r\n                [styles.dark] : theme === 'dark'\r\n            }))}>\r\n                <div className={styles.inner}>\r\n                    <Switch>\r\n                        <Route path={'/auth/login'} render={(props) => {\r\n                            if (isLoggedIn) {\r\n                                return (<Redirect to={'/profile'}/>)\r\n                            }\r\n                            return (<Login styles={styles}/>)\r\n                        }}/>\r\n                        <Route path={'/auth/registration'}\r\n                               render={(props) => {\r\n                                   if (isLoggedIn) {\r\n                                       return (<Redirect to={'/profile'}/>)\r\n                                   }\r\n                                   return (<Registration styles={styles}/>)\r\n                               }}\r\n                        />\r\n                        <Route path={'/auth/restore-password'}\r\n                               render={(props) => <RestorePass styles={styles}/>}/>\r\n                        <Route path={'/auth/change-password/:token?'}\r\n                               render={(props) => <ChangePass styles={styles}/>}/>\r\n                        <Route path={'/auth/profile-edit'}\r\n                               render={(props) => <ProfileEdit styles={styles}/>}/>\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth;\r\n","export default __webpack_public_path__ + \"static/media/preloaderAppleLight.aaa35fe9.svg\";","import {Dispatch} from \"redux\";\r\nimport {packType, packsAPI} from \"../../api/cards-api\";\r\nimport {appActions} from \"../appReducer/appReducer\";\r\nimport { authActions } from \"../authReducer/authReducer\";\r\nimport {AppStateType} from '../store';\r\nimport {batch} from 'react-redux';\r\nimport {createSelector} from 'reselect';\r\n\r\nexport const SET_PACKS = 'packsReducer/SET-PACKS' as const;\r\nexport const SET_PAGE_COUNT = 'packsReducer/SET-PAGE-COUNT' as const;\r\nexport const SET_PAGE_NUMBER = 'packsReducer/SET-PAGE-NUMBER' as const;\r\nexport const SET_RANGE_SIZE_PACKS = 'packsReducer/SET-RANGE-SIZE-PACKS' as const;\r\nexport const SET_PACKS_TOTAL_COUNT = 'packsReducer/SET-PACKS-TOTAL-COUNT' as const;\r\nexport const SET_SORT_PACKS = 'packsReducer/SET-SORT-PACKS-ORDER' as const;\r\nexport const SET_ONLY_MY_MODE = 'packsReducer/SET-ONLY-MY-MODE' as const;\r\n\r\n\r\nexport type PacksParamsType = {\r\n    packName?: 'english'\r\n    min?: number\r\n    max?: number\r\n    page?: number // выбранная страница\r\n    pageCount?: number // количество элементов на странице\r\n    user_id?: string\r\n    sortPacks?: string\r\n}\r\n\r\ntype InitialStateType = {\r\n    cardPacks:packType[]\r\n    packsParams: PacksParamsType\r\n    cardPacksTotalCount: number\r\n    pageCounts: number[]\r\n    onlyMy: boolean\r\n}\r\n\r\nexport const initialState: InitialStateType = {\r\n    cardPacks: [] as packType[],\r\n    packsParams: {\r\n        min: 0,\r\n        max: 20,\r\n        page: 1,\r\n        pageCount: 10,\r\n        sortPacks: '0updated',\r\n    },\r\n    cardPacksTotalCount: 0,\r\n    pageCounts: [10, 20, 30, 50, 100],\r\n    onlyMy: false\r\n}\r\n\r\n\r\n\r\ntype PropertiesType<ActionType> = ActionType extends { [key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof packsActions>>\r\n\r\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_PACKS:{\r\n            return ({\r\n                ...state,\r\n                cardPacks: action.payload.packs\r\n            })\r\n        }\r\n        case SET_RANGE_SIZE_PACKS: {\r\n            return ({\r\n                ...state,\r\n                packsParams: {...state.packsParams, ...action.payload}\r\n            })\r\n        }\r\n        case SET_PAGE_COUNT: {\r\n            return ({\r\n                ...state,\r\n                packsParams: {...state.packsParams, pageCount: action.payload.pageCount}\r\n            })\r\n        }\r\n        case SET_PAGE_NUMBER: {\r\n            return ({\r\n                ...state,\r\n                packsParams: {...state.packsParams, page: action.payload.page}\r\n            })\r\n        }\r\n        case SET_PACKS_TOTAL_COUNT: {\r\n            return ({\r\n                ...state,\r\n                cardPacksTotalCount: action.payload.cardPacksTotalCount\r\n            })\r\n        }\r\n        case SET_SORT_PACKS: {\r\n            return ({\r\n                ...state,\r\n                packsParams: {...state.packsParams, sortPacks: action.payload.sortPacks}\r\n            })\r\n        }\r\n        case SET_ONLY_MY_MODE : {\r\n            return ({\r\n                ...state,\r\n                onlyMy: action.payload.onlyMy\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const packsActions = {\r\n    setPacks(packs: packType[]) {\r\n        return ({\r\n            type: SET_PACKS,\r\n            payload: {\r\n                packs\r\n            }\r\n        })\r\n    },\r\n    setPageCountAC(pageCount: number) {\r\n        return ({\r\n            type: SET_PAGE_COUNT,\r\n            payload: {\r\n                pageCount\r\n            }\r\n        })\r\n    },\r\n    setPageAC(page: number) {\r\n        return ({\r\n            type: SET_PAGE_NUMBER,\r\n            payload: {\r\n                page\r\n            }\r\n        })\r\n    },\r\n\r\n    setRangeSizePacks (rangeSize: number[]) {\r\n        return ({\r\n            type: SET_RANGE_SIZE_PACKS,\r\n            payload: {\r\n                min: rangeSize[0],\r\n                max: rangeSize[1]\r\n            }\r\n        })\r\n    },\r\n    setTotalPacksCountAC(cardPacksTotalCount: number) {\r\n        return ({\r\n            type: SET_PACKS_TOTAL_COUNT,\r\n            payload: {\r\n                cardPacksTotalCount\r\n            }\r\n        })\r\n    },\r\n    setSortPacksAC(order: number, sortBy: string) {\r\n        return ({\r\n            type: SET_SORT_PACKS,\r\n            payload: {\r\n                sortPacks: `${order}${sortBy}`\r\n            }\r\n        })\r\n    },\r\n    setOnlyMyMode(onlyMy: boolean) {\r\n        return ({\r\n            type: SET_ONLY_MY_MODE,\r\n            payload: {\r\n                onlyMy\r\n            }\r\n        })\r\n    },\r\n}\r\n\r\n//Reselect\r\nconst params = (state: AppStateType) => state.packsReducer.packsParams;\r\nconst onlyMyMode = (state: AppStateType) => state.packsReducer.onlyMy;\r\nconst profileId = (state: AppStateType) => state.profileReducer.profile?._id;\r\n\r\nconst getReqParams = createSelector(params, onlyMyMode, profileId, (params, onlyMy, id) => {\r\n    return onlyMy && id ? {...params, user_id: id} : params;\r\n})\r\n\r\n//Thunk Creators\r\nexport const requestPacksTC = () => async (dispatch: Dispatch, getState: () => AppStateType) => {\r\n    dispatch(appActions.setAppStatusAC('loading'));\r\n    //названия параметров в стейте должно соответствовать параметрам get запроса\r\n    try {\r\n        const res = await packsAPI.getPacks(getReqParams(getState()))\r\n        batch(()=>{\r\n            dispatch(packsActions.setPacks(res.cardPacks))\r\n            dispatch(packsActions.setTotalPacksCountAC(res.cardPacksTotalCount))\r\n            dispatch(appActions.setAppStatusAC('succeeded'))\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        batch(()=>{\r\n            dispatch(appActions.setAppErrorAC('error'))\r\n            dispatch(appActions.setAppStatusAC('failed'))\r\n            dispatch(authActions.loginFlowAC(false))\r\n        })\r\n    }\r\n}\r\nexport const createPackTC = () => async (dispatch: Dispatch, getState: () => AppStateType) => {\r\n    dispatch(appActions.setAppStatusAC('loading'))\r\n\r\n    try {\r\n        await packsAPI.createPack()\r\n        let res1 = await packsAPI.getPacks(getReqParams(getState()))\r\n        batch(()=>{\r\n            dispatch(packsActions.setPacks(res1.cardPacks))\r\n            dispatch(appActions.setAppStatusAC('succeeded'))\r\n        })\r\n    }\r\n    catch (err) {\r\n        batch(()=>{\r\n            dispatch(appActions.setAppErrorAC('error'))\r\n            dispatch(appActions.setAppStatusAC('failed'))\r\n        })\r\n\r\n    }\r\n}\r\nexport const deletePackTC = (packId:string) => async (dispatch: Dispatch, getState: () => AppStateType) => {\r\n    dispatch(appActions.setAppStatusAC('loading'))\r\n\r\n    try {\r\n        await packsAPI.deletePack(packId)\r\n        let res1 = await packsAPI.getPacks(getReqParams(getState()))\r\n        batch(() => {\r\n            dispatch(packsActions.setPacks(res1.cardPacks))\r\n            dispatch(appActions.setAppStatusAC('succeeded'))\r\n        })\r\n    }\r\n    catch (err) {\r\n        batch(() => {\r\n            dispatch(appActions.setAppErrorAC('error'))\r\n            dispatch(appActions.setAppStatusAC('failed'))\r\n        })\r\n    }\r\n}\r\n\r\nexport const updatePackTC = (packId:string, name:string) => async (dispatch: Dispatch, getState: () => AppStateType) => {\r\n    dispatch(appActions.setAppStatusAC('loading'))\r\n    try {\r\n        await packsAPI.updatePack(packId, name)\r\n        let res1 = await packsAPI.getPacks(getReqParams(getState()))\r\n        batch(()=> {\r\n            dispatch(packsActions.setPacks(res1.cardPacks))\r\n            dispatch(appActions.setAppStatusAC('succeeded'))\r\n        })\r\n\r\n    }\r\n    catch (err) {\r\n        batch(()=>{\r\n            dispatch(appActions.setAppErrorAC('error'))\r\n            dispatch(appActions.setAppStatusAC('failed'))\r\n        })\r\n    }\r\n}\r\n","import {cardsAPI, cardType} from \"../../api/cards-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../store\";\r\nimport {appActions} from \"../appReducer/appReducer\";\r\nimport {batch} from 'react-redux';\r\n\r\n\r\nconst SET_CARDS = 'changePasswordReducer/SET_CARDS' as const;\r\nconst SET_PAGE_COUNT = 'cardsReducer/SET-PAGE-COUNT' as const;\r\nconst SET_PAGE_NUMBER = 'cardsReducer/SET-PAGE-NUMBER' as const;\r\nconst SET_RANGE_SIZE_CARDS = 'cardsReducer/SET-RANGE-SIZE-CARDS' as const;\r\nconst SET_SORT_CARDS = 'cardsReducer/SET-RANGE-CARDS' as const;\r\nconst SET_IS_OPEN_POPUP = 'cardsReducer/SET-IS-OPEN-POPUP' as const;\r\nconst SET_CARDS_TOTAL_COUNT = 'cardsReducer/SET-CARDS-TOTAL-COUNT' as const;\r\n\r\nexport type CardsParamsType = {\r\n    cardsPack_id?: string\r\n    cardQuestion?: string\r\n    cardAnswer?: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: string\r\n    page?: number\r\n    pageCount?: number\r\n}\r\n\r\ntype InitialStateType = {\r\n    cards: cardType[]\r\n    cardsParams: CardsParamsType\r\n    cardsTotalCount: number\r\n    activePopupId: string | undefined\r\n}\r\n\r\ntype PropertiesType<ActionType> = ActionType extends { [key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof cardsActions>>\r\n\r\n\r\nexport const initialState: InitialStateType = {\r\n    cards: [],\r\n    cardsParams: {\r\n        min: 0,\r\n        max: 1000,\r\n        page: 1,\r\n        pageCount: 1000\r\n    },\r\n    cardsTotalCount: 0,\r\n    activePopupId: undefined\r\n}\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_CARDS: {\r\n            return ({\r\n                ...state,\r\n                cards: action.payload.cards\r\n            })\r\n        }\r\n        case SET_RANGE_SIZE_CARDS: {\r\n            return ({\r\n                ...state,\r\n                cardsParams: {...state.cardsParams, ...action.payload}\r\n            })\r\n        }\r\n        case SET_PAGE_COUNT: {\r\n            return ({\r\n                ...state,\r\n                cardsParams: {...state.cardsParams, pageCount: action.payload.pageCount}\r\n            })\r\n        }\r\n        case SET_PAGE_NUMBER: {\r\n            return ({\r\n                ...state,\r\n                cardsParams: {...state.cardsParams, page: action.payload.page}\r\n            })\r\n        }\r\n        case SET_CARDS_TOTAL_COUNT: {\r\n            return ({\r\n                ...state,\r\n                cardsTotalCount: action.payload.cardsTotalCount\r\n            })\r\n        }\r\n        case SET_SORT_CARDS: {\r\n            return ({\r\n                ...state,\r\n                cardsParams: {...state.cardsParams, sortCards: action.payload.sortCards}\r\n            })\r\n        }\r\n        case SET_IS_OPEN_POPUP: {\r\n            return ({\r\n                ...state,\r\n                ...action.payload\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const cardsActions = {\r\n    setCardsAC(cards: cardType[]) {\r\n        return ({\r\n            type: SET_CARDS,\r\n            payload: {\r\n                cards\r\n            }\r\n        })\r\n    },\r\n    setRangeSizeCardsAC (rangeCardsSize: number[]) {\r\n        return ({\r\n            type: SET_RANGE_SIZE_CARDS,\r\n            payload: {\r\n                min: rangeCardsSize[0],\r\n                max: rangeCardsSize[1]\r\n            }\r\n        })\r\n    },\r\n    setPageAC(page: number) {\r\n        return ({\r\n            type: SET_PAGE_NUMBER,\r\n            payload: {\r\n                page\r\n            }\r\n        })\r\n    },\r\n    setPageCountAC(pageCount: number) {\r\n        return ({\r\n            type: SET_PAGE_COUNT,\r\n            payload: {\r\n                pageCount\r\n            }\r\n        })\r\n    },\r\n    setCardsTotalCountAC (cardsTotalCount: number) {\r\n        return ({\r\n            type: SET_CARDS_TOTAL_COUNT,\r\n            payload: {\r\n                cardsTotalCount\r\n            }\r\n        })\r\n    },\r\n    setSortCardsAC (sortCards: string) {\r\n        return ({\r\n            type: SET_SORT_CARDS,\r\n            payload: {\r\n                sortCards\r\n            }\r\n        })\r\n    },\r\n    setActivePopupIdAC(activePopupId: string) {\r\n        return ({\r\n            type: SET_IS_OPEN_POPUP,\r\n            payload: {\r\n                activePopupId\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const requestCardsTC = (cardsPackId: string ) => async (dispatch: Dispatch) => {\r\n    const params = {\r\n        cardsPack_id: cardsPackId\r\n    }\r\n    dispatch(appActions.setAppStatusAC('loading'));\r\n    try {\r\n        const res = await cardsAPI.getCards(params)\r\n        batch(()=>{\r\n            dispatch(cardsActions.setCardsAC(res.cards))\r\n            dispatch(cardsActions.setCardsTotalCountAC(res.cardsTotalCount))\r\n        })\r\n\r\n    } catch (err) {\r\n        batch(()=>{\r\n            dispatch(appActions.setAppErrorAC('error'))\r\n            dispatch(appActions.setAppStatusAC('failed'))\r\n        })\r\n    }\r\n}\r\nexport const requestCardsPopupTC = (cardsPackId: string) => async (dispatch: Dispatch, getState: () => AppStateType) => {\r\n    const params = {\r\n        min: 0,\r\n        max: 1000,\r\n        page: 1,\r\n        pageCount: 1000,\r\n        cardsPack_id: cardsPackId\r\n    }\r\n    dispatch(appActions.setAppStatusAC('loading'));\r\n    try {\r\n        const res = await cardsAPI.getCards(params)\r\n        batch(()=>{\r\n            dispatch(cardsActions.setCardsAC(res.cards))\r\n            dispatch(cardsActions.setCardsTotalCountAC(res.cardsTotalCount))\r\n            dispatch(cardsActions.setActivePopupIdAC(cardsPackId))\r\n        })\r\n    } catch (err) {\r\n        batch(()=>{\r\n            dispatch(appActions.setAppErrorAC('error'))\r\n            dispatch(appActions.setAppStatusAC('failed'))\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateCardRateTC = (card_id: string, grade: number) => async (dispatch: Dispatch, getState: () => AppStateType) => {\r\n    dispatch(appActions.setAppStatusAC('loading'));\r\n    try {\r\n        const res = await cardsAPI.updateCardGrade(card_id, grade)\r\n        console.log(res)\r\n    }\r\n    catch (err) {\r\n        batch(()=>{\r\n            dispatch(appActions.setAppErrorAC('error'))\r\n            dispatch(appActions.setAppStatusAC('failed'))\r\n        })\r\n    }\r\n    finally {\r\n        dispatch(appActions.setAppStatusAC('succeeded'))\r\n    }\r\n}\r\n\r\nexport default cardsReducer;\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});","import React, {ChangeEvent, useState} from 'react';\r\nimport styles from './CardPage.module.scss';\r\nimport {FormControl, FormControlLabel, FormLabel, Radio, RadioGroup} from '@material-ui/core';\r\nimport {cardType} from '../../../../api/cards-api';\r\n\r\ntype PropsType = {\r\n    name: string\r\n    author: string\r\n    page: number\r\n    card: cardType\r\n    nextPageHandle: (arg1: string, arg2: string) => void\r\n    length: number\r\n}\r\n\r\nexport const CardPage: React.FC<PropsType> = ({name, author, page, card, length, nextPageHandle, ...props}) => {\r\n\r\n    const [rate, setRate] = useState<string>('');\r\n    const [answerVisible, setAnswerVisible] = useState(false)\r\n\r\n    const onChangeRateHandle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setRate(prev => prev = e.target.value)\r\n    }\r\n    const onClickShowAnswer = () => {\r\n        setAnswerVisible(prev => !prev)\r\n    }\r\n    const onClickNextPage = () => {\r\n        if (card._id !== undefined) {\r\n            nextPageHandle(card._id, rate)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.cardPage}>\r\n            <h2>Learn «{name}»</h2>\r\n            <h3>author: {author}</h3>\r\n            <p><strong>Question: </strong>«{card.question}»</p>\r\n            <p><strong>Answer: </strong>{\r\n                answerVisible\r\n                    ? card.answer\r\n                    : <button onClick={onClickShowAnswer}>show the answer</button>}\r\n            </p>\r\n            {\r\n                answerVisible && <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Rate yourself:</FormLabel>\r\n                    <RadioGroup aria-label=\"Rate yourself\" name=\"RateYourself\" value={rate}\r\n                                onChange={onChangeRateHandle}>\r\n                        <FormControlLabel value=\"5\" control={<Radio/>} label=\"Did not know\"/>\r\n                        <FormControlLabel value=\"4\" control={<Radio/>} label=\"Forgot\"/>\r\n                        <FormControlLabel value=\"3\" control={<Radio/>} label=\"A lot of thought\"/>\r\n                        <FormControlLabel value=\"2\" control={<Radio/>} label=\"Confused\"/>\r\n                        <FormControlLabel value=\"1\" control={<Radio/>} label=\"Knew the answer\"/>\r\n                    </RadioGroup>\r\n                </FormControl>\r\n            }\r\n\r\n            <p>Question: {page} of {length}</p>\r\n            {page < (length) && <button onClick={onClickNextPage}>next</button>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, MouseEventHandler, useEffect, useState} from 'react';\r\nimport styles from './CardsPopup.module.scss';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/store';\r\nimport {cardType} from '../../../api/cards-api';\r\nimport {CardPage} from './CardPage/CardPage';\r\nimport {updateCardRateTC} from '../../../redux/cardsReducer/CardsReducer';\r\n\r\ntype PropsType = {\r\n    onClick: () => void\r\n    name: string\r\n    author: string\r\n}\r\n\r\nexport const CardsPopup: React.FC<PropsType> = ({onClick, name, author, ...props}) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [page, setPage] = useState<number>(1)\r\n\r\n    const cards = useSelector<AppStateType,cardType[]>(state => state.cardsReducer.cards)\r\n\r\n    const nextPageHandle = (card_id: string , rate: string) => {\r\n\r\n        if ((page) < cards.length) {\r\n            setPage(prev => prev + 1)\r\n        }\r\n        if (rate !== '') {\r\n            dispatch(updateCardRateTC( card_id, (+rate) ))\r\n        }\r\n    }\r\n\r\n    const [rate, setRate] = useState<string>('');\r\n\r\n    const onChangeRateHandle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setRate(prev => prev = e.target.value)\r\n    }\r\n\r\n    const cardsPages = cards.map((card, i) => {\r\n        return (\r\n            <CardPage card={card} name={name} page={page} author={author} key={`card${i}`} nextPageHandle={nextPageHandle} length={cards.length}/>\r\n        )\r\n    })\r\n    const onClickOuterHandle = (e: React.MouseEvent<HTMLDivElement>) => {\r\n        if(e.currentTarget === e.target) {\r\n            e.stopPropagation()\r\n            onClick()\r\n        }\r\n    }\r\n\r\n    return(\r\n        <td>\r\n            <div className={styles.popupQuestionContainer} onClick={onClickOuterHandle}>\r\n                <div className={styles.popupQuestionBox}>\r\n                    {cardsPages[page - 1]}\r\n                </div>\r\n            </div>\r\n\r\n        </td>\r\n        )\r\n\r\n}","import React, {FC, useEffect, useState} from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport styles from './pack.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {deletePackTC, updatePackTC} from \"../../../../redux/PacksReducer/PacksReducer\";\r\nimport {RequestStatusType} from \"../../../../redux/appReducer/appReducer\";\r\nimport {AppStateType} from \"../../../../redux/store\";\r\nimport {cardsActions, requestCardsPopupTC} from \"../../../../redux/cardsReducer/CardsReducer\";\r\nimport {EditableSpan} from '../../../common/EditableSpan/EditableSpan';\r\nimport {cardType, ProfileResponseType} from '../../../../api/cards-api';\r\nimport {CardsPopup} from '../../CardsPopup/CardsPopup';\r\n\r\n\r\ntype packPropType = {\r\n\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    name: string\r\n    path: string\r\n    cardsCount: number\r\n    grade: number\r\n    shots: number // количество попыток\r\n    rating: number // лайки\r\n    type: string // ещё будет \"folder\" (папка)\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    loading:RequestStatusType\r\n}\r\n\r\nexport const Pack: FC<packPropType> = ({user_id, user_name, name, cardsCount, updated, created, ...props}) => {\r\n    const dispatch = useDispatch()\r\n    const [packName, setPackName] = useState('');\r\n    const user = useSelector<AppStateType, ProfileResponseType | null>(state => state.profileReducer.profile);\r\n    const activePopupId = useSelector<AppStateType, string | undefined>( state => state.cardsReducer.activePopupId)\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deletePackTC(props._id))\r\n    }\r\n    const updateHandler = () => {\r\n        dispatch(updatePackTC(props._id, packName))\r\n    }\r\n    const changeHandler = (name: string) => {\r\n        setPackName(name)\r\n    }\r\n\r\n    const onClickQuestionHandle = () => {\r\n        if (activePopupId === props._id) {\r\n            dispatch(cardsActions.setActivePopupIdAC(''))\r\n        } else {\r\n            dispatch(requestCardsPopupTC(props._id))\r\n        }\r\n    }\r\n    return (\r\n        <tr onClick={(e)=> {\r\n            if (e.currentTarget === e.target) {\r\n                onClickQuestionHandle()\r\n            }\r\n            e.stopPropagation()\r\n        }\r\n        }>\r\n            <td>\r\n                <EditableSpan value={name} onChange={changeHandler}/>\r\n            </td>\r\n            <td>{cardsCount}</td>\r\n            <td>{new Date(updated).toLocaleDateString('ru', {day: '2-digit', month: '2-digit', year: 'numeric'})}</td>\r\n            <td>{user_name}</td>\r\n            <td>\r\n                {user_id === user?._id && <button onClick={deleteHandler} disabled={props.loading === 'loading'}>del</button>}\r\n                {user_id === user?._id && <button onClick={updateHandler} disabled={props.loading === 'loading'}>update</button>}\r\n                <NavLink\r\n                    to={`/cards/${props._id}/${name}`}>\r\n                    learn\r\n                </NavLink>\r\n            </td>\r\n            {activePopupId === props._id && <CardsPopup onClick={onClickQuestionHandle} name={name} author={user_name} />}\r\n        </tr>\r\n\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport styles from './Pagination.module.scss';\r\nimport cn from 'classnames';\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\nlet renderCount = 0;\r\n\r\nexport const Pagination: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    let pages: number[] = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n\r\n    return (<div className={styles.pagination}>\r\n\r\n\r\n        <div className={styles.pagePanel}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={ () => { setPortionNumber(portionNumber - 1) } }\r\n            >{'<'}\r\n            </button>}\r\n\r\n            {pages\r\n                .filter(el => (el >= leftPortionPageNumber && el <= rightPortionPageNumber))\r\n                .map(p => {\r\n                    return <span className={ cn({[styles.selectedPage]: currentPage === p}, styles.pageNumber) }\r\n                                 onClick={(e) => {onPageChanged(p)}}\r\n                                 key={p}\r\n                    >\r\n                        {p}\r\n                    </span>\r\n                })\r\n            }\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>{'>'}</button>\r\n            }\r\n        </div>\r\n\r\n    </div>)\r\n}","import React from 'react';\r\nimport {FormControl, FormHelperText, Input, InputAdornment} from '@material-ui/core';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useFormik} from 'formik';\r\n\r\nexport const SearchPacks = (props: any) => {\r\n    const dispatch = useDispatch();\r\n    // const formik = useFormik({\r\n    //     initialValues: {\r\n    //         email: 'collabincubator@gmail.com',\r\n    //         password: 'collaborators',\r\n    //         rememberMe:true,\r\n    //     },\r\n    //     // validate: values => {\r\n    //     //     const errors: FormikErrorType = {};\r\n    //     //     if (!values.email) {\r\n    //     //         errors.email = 'email is required';\r\n    //     //     } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    //     //         errors.email = 'Invalid email address';\r\n    //     //     }\r\n    //     //     if (!values.password) {\r\n    //     //         errors.password = 'password is required';\r\n    //     //     } else if (values.password.length <= 7) {\r\n    //     //         errors.password = 'password must be at least 7 letters long';\r\n    //     //     }\r\n    //     //     return errors;\r\n    //     // },\r\n    //     onSubmit: values => {\r\n    //         dispatch(loginTC(values.email, values.password))\r\n    //         formik.resetForm()\r\n    //     }\r\n    // });\r\n\r\n    return (\r\n        <div>\r\n            <FormControl>\r\n                <Input\r\n                    id=\"searchPacks\"\r\n                    aria-describedby=\"searchPacks-error\"\r\n                    inputProps={{\r\n                        'aria-label': 'search packs',\r\n                    }}\r\n                />\r\n                <FormHelperText id=\"searchPacks-error\">Search packs</FormHelperText>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    createPackTC, packsActions,\r\n    requestPacksTC,\r\n    PacksParamsType,\r\n} from \"../../../redux/PacksReducer/PacksReducer\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\nimport {packType, ProfileResponseType} from \"../../../api/cards-api\";\r\nimport {Pack} from \"./pack/pack\";\r\nimport avatar from '../../../assets/img/png/cybava.png';\r\nimport styles from './Packs.module.scss'\r\nimport { RequestStatusType } from '../../../redux/appReducer/appReducer';\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {Pagination} from './../../Pagination/Pagination';\r\nimport {Button, ButtonGroup, Slider, Typography} from '@material-ui/core';\r\nimport {SearchPacks} from './SearchPacks/SearchPacks';\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\ntype OrderType = '' | 'asc' | 'desc';\r\ntype KeyType = 'updated' | 'cardsCount' | 'user_name' | 'name';\r\ntype SortByStateUIType = {\r\n    order: OrderType\r\n    key: KeyType\r\n}\r\n\r\nexport const Packs = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n    const packs = useSelector<AppStateType,packType[]>(state => state.packsReducer.cardPacks)\r\n    const onlyMy = useSelector<AppStateType, boolean>(state => state.packsReducer.onlyMy)\r\n    const user = useSelector<AppStateType,ProfileResponseType | null>(state => state.profileReducer.profile)\r\n    const error = useSelector<AppStateType,string >(state => state.appReducer.error)\r\n\r\n    const {\r\n            page = 1, pageCount = 10, min = 0, max = 10, packName, sortPacks\r\n    } = useSelector<AppStateType, PacksParamsType>(state => state.packsReducer.packsParams);\r\n    const pageCounts = useSelector<AppStateType, number[]>(state => state.packsReducer.pageCounts);\r\n    const cardPacksTotalCount = useSelector<AppStateType, number>(state => state.packsReducer.cardPacksTotalCount);\r\n    const loading = useSelector<AppStateType,RequestStatusType>(state => state.appReducer.status);\r\n\r\n    const [sortByStateUI, setSortByStateUI] = useState<SortByStateUIType>({\r\n        order: '',\r\n        key: 'updated'\r\n    })\r\n    const [range, setRange] = useState<number | number[]>([min, max]);\r\n\r\n    useEffect(() => {\r\n         dispatch(requestPacksTC())\r\n    },[page, pageCount, sortPacks, min, max, onlyMy])\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(createPackTC())\r\n    }\r\n\r\n    const onPageChangedHandle = (curPage: number): void => {\r\n        dispatch(packsActions.setPageAC(curPage))\r\n    }\r\n\r\n    const onChangePageCountHandle = (e: ChangeEvent<HTMLSelectElement>): void => {\r\n        const pageCount = Number(e.currentTarget.value)\r\n        dispatch(packsActions.setPageCountAC(pageCount))\r\n    }\r\n\r\n    const onChangePacksSizeHandle = (e: ChangeEvent<{}>, newRange: number | number[]): void => {\r\n        setRange(prev => (newRange))\r\n    }\r\n\r\n    const onClickPageSizeHandle = (): void => {\r\n        if (range instanceof Array) {\r\n            dispatch(packsActions.setRangeSizePacks(range))\r\n        }\r\n    }\r\n\r\n    const onClickSortByHandle = (key: KeyType = 'updated') => {\r\n        const order: OrderType = sortByStateUI.order === 'asc' ? 'desc' : 'asc';\r\n        const intOrder: number = order === 'desc' ? 1 : 0;\r\n        dispatch(packsActions.setSortPacksAC(intOrder, key));\r\n        setSortByStateUI(prev => ( {order, key} ));\r\n    }\r\n\r\n    const onChangeOnlyMyHandle = (mode: string): void => {\r\n        dispatch(packsActions.setOnlyMyMode((mode === 'my')))\r\n    }\r\n\r\n    if(user === null) {\r\n        return <Redirect to={'/auth/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.box}>\r\n                <div className={styles.columnParams}>\r\n                    <div className={styles.profileContainer}>\r\n                        <div className={styles.profileBox}>\r\n                            <div className={styles.avatarBox}>\r\n                                <img src={avatar} alt={'profile avatar'} className={styles.profileAvatar}/>\r\n                            </div>\r\n                            <h3>\r\n                                {user?.name}\r\n                            </h3>\r\n                            <p>Front-end developer</p>\r\n                            <NavLink\r\n                                to={`/auth/profile-edit`}>\r\n                                Edit profile\r\n                            </NavLink>\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.paramsBox}>\r\n                        <h3>Show packs cards</h3>\r\n                        <ButtonGroup color={'primary'}\r\n                                     aria-label=\"OnlyMy mode button group\"\r\n                                     className={styles.onlyMyFilter}\r\n                        >\r\n                            <Button onClick={()=>{onChangeOnlyMyHandle('all')}}\r\n                                    variant={onlyMy ? 'outlined' : 'contained'}>All</Button>\r\n                            <Button onClick={()=>{onChangeOnlyMyHandle('my')}}\r\n                                    variant={onlyMy ? 'contained' : 'outlined'}>My</Button>\r\n                        </ButtonGroup>\r\n\r\n                        <Typography id=\"range-slider\" gutterBottom>\r\n                            Number of cards\r\n                        </Typography>\r\n                        <Slider\r\n                            value={range}\r\n                            onChange={onChangePacksSizeHandle}\r\n                            min={0}\r\n                            max={120}\r\n                            valueLabelDisplay=\"auto\"\r\n                            aria-labelledby=\"range-slider\"\r\n                            // getAriaValueText={valuetext}\r\n                        />\r\n                        <button type={'button'} onClick={onClickPageSizeHandle}>Select</button>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.columnContent}>\r\n\r\n                    <div>\r\n                        <h2>Packs list</h2>\r\n                        <div className={styles.searchPacks}>\r\n                            <SearchPacks/>\r\n                        </div>\r\n                        <table className={styles.tableBox}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    <button onClick={() => onClickSortByHandle('name')}>Name</button>\r\n                                </th>\r\n                                <th>\r\n                                    <button onClick={() => onClickSortByHandle('cardsCount')}>Stack</button>\r\n                                </th>\r\n                                <th>\r\n                                    <button onClick={() => onClickSortByHandle('updated')}> Update</button>\r\n                                </th>\r\n                                <th>\r\n                                    <button onClick={() => onClickSortByHandle('user_name')}> sort by author</button>\r\n                                </th>\r\n                                <th>\r\n                                    <button onClick={onClickHandler} disabled={loading === 'loading'}>add</button>\r\n                                </th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {packs.map(pack => {\r\n\r\n                                return (\r\n                                    <Pack\r\n                                        loading={loading}\r\n                                        key={pack._id}\r\n                                        __v={pack.__v}\r\n                                        _id={pack._id}\r\n                                        grade={pack.grade}\r\n                                        path={pack.path}\r\n                                        rating={pack.rating}\r\n                                        shots={pack.shots}\r\n                                        user_id={pack.user_id}\r\n                                        type={pack.type}\r\n                                        name={pack.name}\r\n                                        user_name={pack.user_name}\r\n                                        updated={pack.updated}\r\n                                        created={pack.created}\r\n                                        cardsCount={pack.cardsCount}/>\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                        <div className={styles.tableSettings}>\r\n                            <Pagination totalItemsCount={cardPacksTotalCount}\r\n                                        pageSize={pageCount}\r\n                                        portionSize={10}\r\n                                        currentPage={page}\r\n                                        onPageChanged={onPageChangedHandle}\r\n                            />\r\n                            <span className={styles.paramsName}>Select a Page size: </span>\r\n                            <select id={'selectPageCount'} value={pageCount} onChange={onChangePageCountHandle}>\r\n                                {pageCounts.map((pcValue, i) => {\r\n                                    return (\r\n                                        <option key={`${i}`} value={pcValue}>{pcValue}</option>\r\n                                    )\r\n                                })}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React, {FC} from 'react'\r\nimport {cardType} from \"../../../../api/cards-api\";\r\nimport styles from \"./Card.module.scss\";\r\n\r\n\r\nexport const Card:FC<cardType> = ({user_id,_id,created,updated,grade,type,rating,cardsPack_id,question,shots,answer,...props}) => {\r\n\r\n    return (\r\n        <div className={styles.card}>\r\n            <div>\r\n                {question}\r\n            </div>\r\n            <div>{answer}</div>\r\n            <div>{updated}</div>\r\n            <div>{grade.toFixed(2)}</div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { FC } from 'react'\r\nimport styles from './table.module.scss'\r\nimport {Card} from \"../../Main/Cards/Card/Card\";\r\nimport {cardType} from \"../../../api/cards-api\";\r\n\r\n\r\ntype TablePropsType = {\r\n    items:cardType[]\r\n}\r\nexport const Table:FC<TablePropsType> = ({items}) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.box}>\r\n                <div className={styles.inner}>\r\n                    <div className={styles.tableHeader}>\r\n                        <div>Question</div>\r\n                        <div>answer</div>\r\n                        <div>Last Updated</div>\r\n                        <div>Grade</div>\r\n                    </div>\r\n                    {items.map(item => {\r\n                        return (\r\n                            <Card {...item}\r\n                            />\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport styles from \"./Cards.module.scss\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\nimport {cardType} from \"../../../api/cards-api\";\r\nimport { Table } from '../../common/table/table';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {requestCardsTC} from \"../../../redux/cardsReducer/CardsReducer\";\r\n\r\n\r\ntype ParamsType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport const Cards = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {id, name} = useParams<ParamsType>()\r\n    const cards = useSelector<AppStateType,cardType[]>(state => state.cardsReducer.cards)\r\n    useEffect(() => {\r\n        dispatch(requestCardsTC(id))\r\n    },[dispatch,id])\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.box}>\r\n                <div className={styles.inner}>\r\n                   <h2>{name}</h2>\r\n                    <input type=\"text\"/>\r\n\r\n                    <Table items={cards}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport Header from './components/Header/Header';\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport Profile from \"./components/Main/Profile/Profile\";\r\nimport {PageNotFounded} from \"./components/Main/PageNotFounded/PageNotFounded\";\r\nimport Auth from './components/Main/Auth/Auth';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./redux/store\";\r\nimport styles from './App.module.scss'\r\nimport preloader from './assets/icons/preloaderAppleLight.svg';\r\nimport { ProfileResponseType } from './api/cards-api';\r\nimport {Packs} from \"./components/Main/Packs/Packs\";\r\nimport {Cards} from \"./components/Main/Cards/Cards\";\r\nimport classNames from \"classnames\";\r\nimport {authMeTC} from \"./redux/authReducer/authReducer\";\r\n\r\nconst PATH = {\r\n    AUTH: '/auth',\r\n    LOGIN: 'auth/login',\r\n    PROFILE: '/profile',\r\n    PACKS: '/packs',\r\n    CARDS: '/cards/:id/:name',\r\n}\r\n\r\n\r\nconst App = (props: any) => {\r\n    const initializing = useSelector<AppStateType, boolean>(state => state.appReducer.initializing);\r\n    const theme = useSelector<AppStateType, 'light'|'dark'>(state => state.appReducer.theme);\r\n    const isLoggedIn = useSelector<AppStateType, boolean | null>( state => state.authReducer.isLoggedIn);\r\n    const profile = useSelector<AppStateType, ProfileResponseType | null>(state => state.profileReducer.profile);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(authMeTC())\r\n    },[isLoggedIn])\r\n\r\n\r\n    if (initializing) {\r\n        return (<div className={'initializePreloader'}>\r\n            <img src={preloader} alt={'initialize preloader'}/>\r\n        </div>)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={classNames(styles.app, ({\r\n                [styles.appDark]: theme === 'dark',\r\n                [styles.app]: theme === 'light'\r\n            }))}\r\n            />\r\n            <Header/>\r\n            <Switch>\r\n                <Route path={'/'} exact render={() => {\r\n                    if (profile !== null && isLoggedIn) {\r\n                        return (<Redirect to={PATH.PROFILE}/>);\r\n                    }\r\n                    return (<Redirect to={PATH.LOGIN}/>)\r\n                }}/>\r\n                <Route path={PATH.AUTH} render={() => <Auth/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n                <Route path={PATH.CARDS} render={() => <Cards/>}/>\r\n                <Route render={() => <PageNotFounded/>}/>\r\n            </Switch>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport authReducer from './authReducer/authReducer';\r\nimport profileReducer from './profileReducer/profileReducer';\r\nimport registrationReducer from './registrationReducer/registrationReducer';\r\nimport restorePassReducer from './restorePassReducer/restorePassReducer';\r\nimport changePassReducer from './changePassReducer/changePassReducer';\r\nimport appReducer from \"./appReducer/appReducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport {packsReducer} from \"./PacksReducer/PacksReducer\";\r\nimport cardsReducer from \"./cardsReducer/CardsReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    authReducer,\r\n    profileReducer,\r\n    registrationReducer,\r\n    restorePassReducer,\r\n    changePassReducer,\r\n    appReducer,\r\n    packsReducer,\r\n    cardsReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(\r\n    applyMiddleware(thunk),\r\n    // other store enhancers if any\r\n));\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport './fonts.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './redux/store';\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\nimport {createMuiTheme} from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        htmlFontSize: 10\r\n    },\r\n    overrides: {\r\n        MuiInputBase: {\r\n            root: {\r\n                color: \"rgb(45, 46, 70)\"\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <ThemeProvider theme={theme}>\r\n            <App/>\r\n            </ThemeProvider>\r\n        </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Packs_container__2MHmy\",\"box\":\"Packs_box__1ObJP\",\"columnParams\":\"Packs_columnParams__9PZt0\",\"profileBox\":\"Packs_profileBox__2V8iM\",\"avatarBox\":\"Packs_avatarBox__2QJH4\",\"profileAvatar\":\"Packs_profileAvatar__37dHz\",\"paramsBox\":\"Packs_paramsBox__34M59\",\"onlyMyFilter\":\"Packs_onlyMyFilter__2j03k\",\"columnContent\":\"Packs_columnContent__2BNn5\",\"tableBox\":\"Packs_tableBox__3t6sz\",\"tableSettings\":\"Packs_tableSettings__QUNCP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Auth_container__3okAI\",\"box\":\"Auth_box__3krmo\",\"inner\":\"Auth_inner__2tKgn\",\"imgSuccessAction\":\"Auth_imgSuccessAction__1a_gq\",\"imgProfileAvatarBox\":\"Auth_imgProfileAvatarBox__LCFk7\",\"imgProfileAvatar\":\"Auth_imgProfileAvatar__3ugxh\",\"imgUpdateAvatarBox\":\"Auth_imgUpdateAvatarBox__XsZtV\",\"imgUpdateAvatar\":\"Auth_imgUpdateAvatar__3k5Kg\",\"controlInputs\":\"Auth_controlInputs__2syNu\",\"btnContainer\":\"Auth_btnContainer__2ynGi\",\"formButtons\":\"Auth_formButtons__3vsA_\",\"btn\":\"Auth_btn__1Ishi\",\"forgotBox\":\"Auth_forgotBox__34kiU\",\"navLinkForgotBox\":\"Auth_navLinkForgotBox__2Pf6y\",\"footerBox\":\"Auth_footerBox__ihT55\",\"footerLink\":\"Auth_footerLink__1S8SW\",\"dark\":\"Auth_dark__3K6-E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navList\":\"Navigation_navList__R7kXu\",\"navLinkItem\":\"Navigation_navLinkItem__15_wa\",\"menuLink\":\"Navigation_menuLink__2MHep\",\"menuLinkActive\":\"Navigation_menuLinkActive__3LIUJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__2GAGc\",\"pagePanel\":\"Pagination_pagePanel__29iN5\",\"pageNumber\":\"Pagination_pageNumber__3w0w0\",\"selectedPage\":\"Pagination_selectedPage__vtrIV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"table_container__3LW6X\",\"box\":\"table_box__tMnHm\",\"inner\":\"table_inner__DOUqG\",\"tableHeader\":\"table_tableHeader__1R7go\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2wtUi\",\"app\":\"App_app__KsShV\",\"appDark\":\"App_appDark__2tqPK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1pWDv\",\"box\":\"Cards_box__1ZEEp\",\"inner\":\"Cards_inner__2BjS3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"popupQuestionContainer\":\"CardsPopup_popupQuestionContainer__PkUID\",\"popupQuestionBox\":\"CardsPopup_popupQuestionBox__1SdkF\"};"],"sourceRoot":""}