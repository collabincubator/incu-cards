{"version":3,"sources":["api/cards-api.ts","redux/profileReducer/profileReducer.ts","redux/appReducer/appReducer.ts","redux/authReducer/authReducer.ts","components/Header/Navigation/Navigation.tsx","components/Header/Header.tsx","components/Main/Profile/Profile.tsx","components/Main/PageNotFounded/PageNotFounded.tsx","components/common/Input/input.tsx","components/Main/Login/LoginForm/loginForm.tsx","components/Main/Login/Login.tsx","redux/registrationReducer/registrationReducer.ts","components/Main/Registration/registrationForm/registrationForm.tsx","components/Main/Registration/Registration.tsx","assets/img/svg/mail-circle-icon.svg","components/Main/Registration/CheckEmail.tsx","redux/restorePassReducer/restorePassReducer.ts","components/Main/RestorePass/restorePassForm/RestorePassForm.tsx","components/Main/RestorePass/RestorePass.tsx","redux/changePassReducer/changePassReducer.ts","components/Main/ChangePass/ChangePassForm/ChangePassForm.tsx","components/Main/ChangePass/ChangePass/ChangePass.tsx","components/Main/Auth/Auth.tsx","assets/icons/preloaderAppleLight.svg","redux/PacksReducer/PacksReducer.ts","components/Main/Packs/pack/pack.tsx","components/Pagination/Pagination.tsx","components/Main/Packs/Packs.tsx","components/Main/Cards/Card/Card.tsx","components/common/table/table.tsx","redux/cardsReducer/CardsReducer.ts","components/Main/Cards/Cards.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx","components/Main/Packs/Packs.module.scss","components/Main/Auth/Auth.module.scss","components/Header/Navigation/Navigation.module.css","components/Pagination/Pagination.module.scss","components/common/table/table.module.scss","App.module.scss","components/Main/Cards/Cards.module.scss","components/Header/Header.module.css","components/Main/Packs/pack/pack.module.scss","components/Main/Cards/Card/Card.module.scss"],"names":["cardsRequest","axios","create","baseURL","withCredentials","authAPI","email","password","post","then","res","data","rememberMe","delete","name","avatar","put","resetPasswordToken","fromUser","message","packsAPI","params","get","pageCount","page","user_id","cardsPack","id","_id","cardsAPI","cardsPack_id","SET_PROFILE_DATA","SET_PROFILE_UPDATE","initialState","profile","profileActions","type","payload","profileReducer","state","action","STATUS","ERROR","INITIALIZING","THEME","status","error","initializing","theme","appActions","value","appReducer","LOGIN_FLOW","INFO","isLoggedIn","info","authActions","authReducer","Navigation","props","userName","useSelector","isLoggerIn","dispatch","useDispatch","useState","path","tempState","navLinks","map","link","index","className","styles","navLinkItem","to","toLowerCase","menuLink","activeClassName","menuLinkActive","setTheme","navList","FormGroup","FormControlLabel","control","Switch","size","onClick","label","Button","variant","color","catch","finally","Header","header","Profile","setName","onClickChangeNameHandler","changeProfileNameTC","onChange","e","currentTarget","onKeyPress","key","PageNotFounded","FormikCustomInput","position","isBlind","setIsBlind","Input","endAdornment","InputAdornment","IconButton","aria-label","VisibilityOff","Visibility","LoginForm","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","resetForm","handleSubmit","FormControl","getFieldProps","controlInputs","InputLabel","htmlFor","handleChange","aria-describedby","FormHelperText","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","forgotBox","navLinkForgotBox","disabled","formButtons","Login","footerBox","footerLink","SUCCESS","LOADING","registrationSuccess","loading","registrationActions","registrationReducer","RegistrationForm","history","useHistory","passwordConfirm","console","log","btnContainer","goBack","Registration","CheckEmail","src","emailCircleIcon","alt","imgSuccessAction","RESTORE","restoreActions","restorePassReducer","RestorePassForm","emailForRestore","RestorePass","CHANGE","successChangePass","changePassActions","success","changePassReducer","ChangePassForm","token","useParams","repeatPassword","passwordLength","ChangePass","Auth","container","classNames","box","dark","inner","render","SET_PACKS","SET_PAGE_COUNT","SET_PAGE_NUMBER","SET_MIN_CARDS_COUNT","SET_MAX_CARDS_COUNT","SET_PACKS_TOTAL_COUNT","SET_SORT_PACKS","cardPacks","packsParams","min","max","sortPacks","cardPacksTotalCount","pageCounts","packsActions","packs","order","sortBy","requestPacksTC","getState","a","packsReducer","Pack","user_name","cardsCount","updated","created","packName","setPackName","input","packId","res1","err","updatePackTC","renderCount","Pagination","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pagination","pagePanel","filter","el","p","cn","selectedPage","pageNumber","Packs","React","memo","user","profileId","sortByStateUI","setSortByStateUI","range","setRange","ckeck","setCkeck","useEffect","minPacksSizeHandler","minSize","maxPacksSizeHandler","maxSize","onClickSortByHandle","intOrder","prev","columnParams","checked","requestUserCardsTC","Typography","gutterBottom","Slider","newRange","valueLabelDisplay","aria-labelledby","columnContent","tableBox","pack","__v","grade","rating","shots","tableSettings","curPage","paramsName","Number","pcValue","paramsInput","onBlur","Card","question","answer","card","toFixed","Table","items","tableHeader","item","SET_CARDS","cards","cardsActions","cardsReducer","Cards","cardsPackId","PATH","App","preloader","app","appDark","exact","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","createMuiTheme","typography","htmlFontSize","overrides","MuiInputBase","root","ReactDOM","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.76f116d9.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {PacksParamsType} from '../redux/PacksReducer/PacksReducer';\r\n\r\nconst cardsRequest = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true\r\n})\r\nexport type ProfileResponseType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    error?: string;\r\n}\r\nexport type packType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    name: string\r\n    path: string\r\n    cardsCount: number\r\n    grade: number\r\n    shots: number // количество попыток\r\n    rating: number // лайки\r\n    type: string // ещё будет \"folder\" (папка)\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n}\r\nexport type packsResponse = {\r\n    cardPacks: packType[]\r\n    cardPacksTotalCount: number // количество колод\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number // выбранная страница\r\n    pageCount: number // количество элементов на странице\r\n}\r\nexport type cardType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string | undefined\r\n}\r\nexport type  cardsResponseType =  {\r\n    cards: cardType[]\r\n    cardsTotalCount: number\r\n    maxGrade:number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\nexport type serverResponseType = {\r\n    info: string\r\n    error: string;\r\n}\r\n\r\n\r\n// export const pingAPI = {\r\n//     pingBack() {\r\n//        return   cardsRequest.get<number>(`/ping?frontTime=${Date.now()}`) //\r\n//\r\n//     }\r\n// }\r\n\r\nexport const authAPI = {\r\n    registration(email: string, password: string) {\r\n        return cardsRequest.post(`/auth/register/`, {email, password})\r\n            .then(res => res.data)\r\n    },\r\n    logIn(email: string, password: string, rememberMe: boolean = true) {\r\n        return cardsRequest.post<ProfileResponseType>(`/auth/login`, {email, password, rememberMe})\r\n            .then(res => res.data)\r\n    },\r\n    me() {\r\n        return cardsRequest.post<ProfileResponseType>(`/auth/me`, {})\r\n            .then(res => res.data)\r\n    },\r\n    logOut(){\r\n        return cardsRequest.delete<serverResponseType>(`/auth/me`)\r\n            .then(res => res.data)\r\n    },\r\n    updateMe(name: string, avatar?: string) {\r\n        return cardsRequest.put(`/auth/me`, {name, avatar})\r\n            .then(res => res.data)\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return cardsRequest.post(`/auth/set-new-password`, {password, resetPasswordToken})\r\n            .then(res => res.data)\r\n    },\r\n    restorePassword(email: string,) {\r\n        const message = `\t\r\n\t            password recovery link: \r\n\t            <a href='http://localhost:3000/#/auth/change-password/$token$'>\r\n\t                link\r\n\t            </a>`\r\n        const fromUser = 'test-front-admin <valtika>'\r\n        return cardsRequest.post(`https://neko-back.herokuapp.com/2.0/auth/forgot`, {email, fromUser, message})\r\n            .then(res => res.data)\r\n    }\r\n\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(params?: PacksParamsType) {\r\n        return cardsRequest.get<packsResponse>(`/cards/pack`, {\r\n            params: {...params}\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n    getUserPacks(pageCount: number = 100, page: number = 1, user_id: string | undefined) {\r\n        return cardsRequest.get<packsResponse>(`/cards/pack?pageCount=${pageCount}&page=${page}&sortPacks=0updated&user_id=${user_id}`)\r\n            .then(res => res.data)\r\n    },\r\n    createPack() {\r\n        return cardsRequest.post<packsResponse>(`/cards/pack`, {\r\n            cardsPack: {\r\n                name: \"new pack 2.0\",\r\n            }\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n    deletePack(id: string) {\r\n        return cardsRequest.delete(`/cards/pack?id=${id}`)\r\n            .then(res => res.data)\r\n    },\r\n    updatePack(id: string, name: string) {\r\n        return cardsRequest.put(`/cards/pack`, {\r\n            cardsPack: {\r\n                _id: id,\r\n                name,\r\n            }\r\n        })\r\n            .then(res => res.data)\r\n    }\r\n}\r\nexport const cardsAPI = {\r\n    getCards(cardsPack_id:string) {\r\n        return cardsRequest.get<cardsResponseType>(`/cards/card?cardsPack_id=${cardsPack_id}`)\r\n            .then(res => res.data)\r\n    },\r\n    createCard(cardsPack_id: string) {\r\n        return cardsRequest.post<packsResponse>(`/cards/card`,{cardsPack_id})\r\n            .then(res => res.data)\r\n    },\r\n    deleteCard() {\r\n        return cardsRequest.delete(`/cards/card`)\r\n            .then(res =>res.data)\r\n    },\r\n    updateCard(_id:string,name:string) {\r\n        return cardsRequest.put(`/cards/card `,{_id,name})\r\n            .then(res => res.data)\r\n    }\r\n}\r\n","import {authAPI, ProfileResponseType} from '../../api/cards-api';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport const SET_PROFILE_DATA = 'profileReducer/SET-PROFILE-DATA' as const;\r\nexport const SET_PROFILE_UPDATE = 'profileReducer/SET_PROFILE_UPDATE' as const;\r\n\r\ntype InitialStateType = {\r\n    profile: null | ProfileResponseType\r\n}\r\n\r\nexport const initialState: InitialStateType = {\r\n    profile: null as ProfileResponseType | null,\r\n}\r\n\r\ntype PropertiesType<ActionType> = ActionType extends { [key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof profileActions>>\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_PROFILE_DATA: {\r\n            return ({\r\n                ...state,\r\n                profile: {...action.payload.data}\r\n            })\r\n        }\r\n        case SET_PROFILE_UPDATE: {\r\n            return ({\r\n                ...state,\r\n                profile: {...state.profile, ...action.payload.data}\r\n\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const profileActions = {\r\n    setProfileDataAC: (data: ProfileResponseType) => {\r\n        return ({\r\n            type: SET_PROFILE_DATA,\r\n            payload: {\r\n                data\r\n            }\r\n        })\r\n    },\r\n    setProfileUpdateAC: (data: any) => {\r\n        return({\r\n            type: SET_PROFILE_UPDATE,\r\n            payload: {\r\n                data\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const changeProfileNameTC = (name: string) => (dispatch: Dispatch) => {\r\n    authAPI.updateMe(name)\r\n        .then(data => {\r\n            profileActions.setProfileUpdateAC(data)\r\n        })\r\n}\r\n\r\n\r\n\r\nexport default profileReducer;","export const STATUS = 'appReducer/SET-STATUS' as const;\r\nexport const ERROR = 'appReducer/SET-ERROR' as const;\r\nexport const INITIALIZING = 'appReducer/SET-INITIALIZING' as const;\r\nexport const THEME = 'appReducer/SET-THEME' as const;\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string\r\n    initializing: boolean\r\n    theme:'light' | 'dark'\r\n}\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: '',\r\n    initializing: false,\r\n    theme:'light'\r\n}\r\n\r\n\r\ntype PropertiesType<ActionType> = ActionType extends { [key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof appActions>>\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZING: {\r\n            return ({\r\n                ...state,\r\n                initializing: action.payload.value\r\n            })\r\n        }\r\n        case ERROR: {\r\n            return ({\r\n                ...state,\r\n                error: action.payload.error\r\n            })\r\n        }\r\n        case STATUS: {\r\n            return ({\r\n                ...state,\r\n                status: action.payload.status\r\n            })\r\n        }\r\n        case THEME:{\r\n            return ({\r\n                ...state,\r\n                theme:action.payload.theme\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const appActions = {\r\n    setAppErrorAC(error: string) {\r\n        return ({\r\n            type: ERROR,\r\n            payload: {\r\n                error\r\n            }\r\n        })\r\n    },\r\n    setAppStatusAC(status: RequestStatusType) {\r\n        return ({\r\n            type: STATUS,\r\n            payload: {\r\n                status\r\n            }\r\n        })\r\n    },\r\n    setInitializingAC(value: boolean) {\r\n        return ({\r\n            type: INITIALIZING,\r\n            payload: {\r\n                value\r\n            }\r\n        })\r\n    },\r\n    setThemeAC(theme: 'light' | 'dark') {\r\n        return ({\r\n            type: THEME,\r\n            payload: {\r\n                theme\r\n            }\r\n        })\r\n    },\r\n}\r\n\r\n\r\n\r\nexport default appReducer;\r\n","import {authAPI} from '../../api/cards-api';\r\nimport {Dispatch} from \"redux\";\r\nimport {profileActions} from '../profileReducer/profileReducer';\r\nimport {appActions} from '../appReducer/appReducer';\r\n\r\nexport const LOGIN_FLOW = 'authReducer/SET-LOGIN-FLOW' as const;\r\nexport const ERROR = 'authReducer/SET-ERROR' as const;\r\nexport const INFO = 'authReducer/SET-INFO' as const;\r\n\r\n\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n    error: string\r\n    info: string\r\n}\r\n\r\nexport const initialState: InitialStateType = {\r\n    isLoggedIn: false,\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\ntype PropertiesType<ActionType> = ActionType extends { [key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof authActions>>\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case LOGIN_FLOW: {\r\n            return ({\r\n                ...state,\r\n                isLoggedIn: action.payload.isLoggedIn\r\n            })\r\n        }\r\n        case ERROR: {\r\n            return ({\r\n                ...state,\r\n                error: action.payload.error\r\n            })\r\n        }\r\n        case INFO: {\r\n            return ({\r\n                ...state,\r\n                info: action.payload.info\r\n            })\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const authActions = {\r\n\r\n    loginFlowAC: (isLoggedIn: boolean) => {\r\n        return ({\r\n            type: LOGIN_FLOW,\r\n            payload: {\r\n                isLoggedIn\r\n            } as InitialStateType,\r\n        })\r\n    },\r\n\r\n    errorAC: (error: string) => {\r\n        return ({\r\n            type: ERROR,\r\n            payload: {\r\n                error\r\n            } as InitialStateType,\r\n        })\r\n    },\r\n    infoAC: (info: string) => {\r\n        return ({\r\n            type: INFO,\r\n            payload: {\r\n                info\r\n            } as InitialStateType,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe?: boolean) => (dispatch: any) => {\r\n    dispatch(appActions.setInitializingAC(true))\r\n    authAPI.logIn(email, password, rememberMe = true)\r\n        .then(data => {\r\n            dispatch(profileActions.setProfileDataAC(data))\r\n            dispatch(authActions.loginFlowAC(true))\r\n            dispatch(appActions.setAppErrorAC(''))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(authActions.loginFlowAC(false))\r\n            dispatch(authActions.errorAC(error.message))\r\n        })\r\n        .finally(() => {\r\n            dispatch(appActions.setInitializingAC(false))\r\n        })\r\n}\r\nexport const LogoutTC = () => (dispatch: any) => {\r\n    dispatch(appActions.setInitializingAC(true))\r\n    authAPI.logOut()\r\n        .then((data) => {\r\n            dispatch(authActions.loginFlowAC(false))\r\n            dispatch(authActions.infoAC(data.info))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(authActions.errorAC(error.error))\r\n            dispatch(authActions.loginFlowAC(false))\r\n        })\r\n        .finally(() => {\r\n            dispatch(appActions.setInitializingAC(false))\r\n        })\r\n}\r\n\r\nexport const authMeTC = () => (dispatch: Dispatch) => {\r\n    dispatch(appActions.setInitializingAC(true))\r\n    authAPI.me()\r\n        .then(data => {\r\n            dispatch(profileActions.setProfileDataAC(data))\r\n            dispatch(authActions.loginFlowAC(true))\r\n        })\r\n        .catch(err => {\r\n            dispatch(authActions.errorAC(err.message))\r\n            dispatch(authActions.loginFlowAC(false))\r\n        })\r\n        .finally(() => {\r\n            dispatch(appActions.setInitializingAC(false))\r\n        })\r\n}\r\n\r\n\r\nexport default authReducer;\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport styles from './Navigation.module.css';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport {Button, FormControlLabel, FormGroup, Switch} from '@material-ui/core';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {LogoutTC} from '../../../redux/authReducer/authReducer';\r\nimport {AppStateType} from '../../../redux/store';\r\nimport { appActions } from '../../../redux/appReducer/appReducer';\r\n\r\nconst Navigation = (props: any) => {\r\n    const userName = useSelector<AppStateType,string | undefined>(state => state.profileReducer.profile?.email)\r\n    const isLoggerIn = useSelector<AppStateType,boolean>(state => state.authReducer.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n\r\n    let [tempState, setTempState] = useState( [\r\n\r\n        {name: 'Login', path: 'auth/login'},\r\n        {name: 'Registration', path: 'auth/registration'},\r\n        {name: 'Restore Password', path: 'auth/restore-password'},\r\n        {name: 'Change Password', path: 'auth/change-password'},\r\n        {name: 'Packs', path: 'packs'},\r\n        {name: 'Profile', path: 'profile'}]);\r\n\r\n    let navLinks = tempState.map((link:{name: string, path:string}, index:number) => {\r\n        return <li key={index} className={styles.navLinkItem}>\r\n            <NavLink to={`/${(link.path).toLowerCase()}`} className={styles.menuLink} activeClassName={styles.menuLinkActive}>\r\n                <span>{link.name}</span>\r\n            </NavLink>\r\n        </li>\r\n    })\r\n\r\n    const onClickLogoutHandler = () => {\r\n        dispatch(LogoutTC())\r\n    }\r\n    const [theme, setTheme] = useState<'light' | 'dark'>('dark');\r\n\r\n    const toggleTheme =  () => {\r\n        if (theme === 'light') {\r\n             setTheme('dark');\r\n            dispatch(appActions.setThemeAC(theme))\r\n        } else {\r\n             setTheme('light');\r\n             dispatch(appActions.setThemeAC(theme))\r\n        }\r\n    }\r\n\r\n\r\n    return <ul className={styles.navList}>\r\n\r\n        {navLinks}\r\n        <FormGroup>\r\n            <FormControlLabel\r\n                control={<Switch size={\"medium\"} onClick={toggleTheme} />}\r\n                label=\"Change Theme\"\r\n            />\r\n        </FormGroup>\r\n        {isLoggerIn && <><div>{userName}</div> <Button variant=\"contained\" color=\"primary\" onClick={onClickLogoutHandler}>\r\n            Logout\r\n        </Button></>}\r\n\r\n    </ul>\r\n}\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport Navigation from './Navigation/Navigation';\r\nimport styles from './Header.module.css';\r\n\r\nconst Header = (props: any) => {\r\n    return <div className={styles.header}>\r\n        <Navigation/>\r\n    </div>\r\n}\r\n\r\nexport default Header;\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { ProfileResponseType } from '../../../api/cards-api';\r\nimport { changeProfileNameTC } from '../../../redux/profileReducer/profileReducer';\r\nimport {AppStateType} from '../../../redux/store';\r\n\r\n\r\nconst Profile = () => {\r\n\r\n    const profile = useSelector<AppStateType, ProfileResponseType | null>( state => state.profileReducer.profile);\r\n    const isLoggedIn = useSelector<AppStateType, boolean | null>( state => state.authReducer.isLoggedIn);\r\n    let [name, setName] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const onChangeNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.currentTarget.value)\r\n    }\r\n    const onClickChangeNameHandler = () => {\r\n        dispatch(changeProfileNameTC(name))\r\n    }\r\n\r\n    if(!isLoggedIn) {\r\n        return  <Redirect to={'auth/login'}/>\r\n    }\r\n\r\n    return <div className='profile'>\r\n        <div>\r\n            <ul>\r\n                <li> <span>{profile !== null ? profile.email : 'not authorized'}</span></li>\r\n                <li>\r\n                    <input value={name} onChange={onChangeNameHandler} onKeyPress={(e)=> (e.key === 'Enter' && onClickChangeNameHandler())}/>\r\n                    <span>{profile !== null && profile.name}</span>\r\n                    <button onClick={onClickChangeNameHandler}>Change Name!</button>\r\n                </li>\r\n                <li>3</li>\r\n                <li>4</li>\r\n                <li>5</li>\r\n            </ul>\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react'\r\nimport './404.css'\r\n\r\nexport const PageNotFounded = () => {\r\n    return (\r\n        <div className={`wrapper`}>\r\n            <div className=\"face\">\r\n                <div className=\"band\">\r\n                    <div className=\"red\"></div>\r\n                    <div className=\"white\"></div>\r\n                    <div className=\"blue\"></div>\r\n                </div>\r\n                <div className=\"eyes\"></div>\r\n                <div className=\"dimples\"></div>\r\n                <div className=\"mouth\"></div>\r\n            </div>\r\n\r\n            <h1 className={`text`}>Oops! Something went wrong!</h1>\r\n            <div className=\"btn\">Return to Home</div>\r\n        </div>\r\n\r\n\r\n    )\r\n}","import React, {ChangeEvent, FC, useState} from 'react'\r\nimport {IconButton, Input, InputAdornment} from \"@material-ui/core\";\r\nimport {Visibility, VisibilityOff} from \"@material-ui/icons\";\r\n\r\ninterface inputType {\r\n    color?: \"primary\" | \"secondary\"\r\n    id:string\r\n    value:string\r\n    onChange:(e:ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void\r\n    position:'end'|'start'\r\n    name?:string\r\n}\r\nexport const FormikCustomInput:FC<inputType> = ({id,value,color,onChange,position,name}) => {\r\n    let [isBlind, setIsBlind] = useState(true)\r\n    const eyeToggle = () => {\r\n        setIsBlind(!isBlind)\r\n    }\r\n\r\n    return (\r\n        <Input\r\n            color={color}\r\n            id={id}\r\n            type={isBlind ? 'password' : 'text'}\r\n            value={value}\r\n            name={name ? name : id}\r\n            onChange={onChange}\r\n            endAdornment={\r\n                <InputAdornment position={position}>\r\n                    <IconButton\r\n                        aria-label={\"toggle password visibility\"}\r\n                        onClick={eyeToggle}\r\n                    >\r\n                        {isBlind ? <VisibilityOff/> : <Visibility/>}\r\n                    </IconButton>\r\n                </InputAdornment>\r\n            }\r\n        />\r\n    )\r\n}\r\n","import React, {FC} from 'react'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormHelperText, Input, InputLabel} from \"@material-ui/core\";\r\nimport {FormikCustomInput} from \"../../../common/Input/input\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {loginTC} from \"../../../../redux/authReducer/authReducer\";\r\nimport {Favorite, FavoriteBorder} from \"@material-ui/icons\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\ntype FormPropsType = {\r\n    styles:any\r\n\r\n}\r\nexport const LoginForm:FC<FormPropsType> = ({styles}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'collabincubator@gmail.com',\r\n            password: 'collaborators',\r\n            rememberMe:true,\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'password is required';\r\n            } else if (values.password.length <= 7) {\r\n                errors.password = 'password must be at least 7 letters long';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values.email, values.password))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <FormControl {...formik.getFieldProps('email')}\r\n                         error={!!formik.errors.email}\r\n                         className={styles.controlInputs}>\r\n                <InputLabel htmlFor=\"email\">Email</InputLabel>\r\n                <Input\r\n                    {...formik.getFieldProps('email')}\r\n                    id={\"email\"}\r\n                    value={formik.values.email}\r\n                    onChange={formik.handleChange}\r\n                    aria-describedby={'email-error'}/>\r\n                {!!formik.errors.email && <FormHelperText id=\"email-error\">{formik.errors.email}</FormHelperText>}\r\n            </FormControl>\r\n            <FormControl {...formik.getFieldProps('password')}\r\n                         error={!!formik.errors.password}\r\n                         className={styles.controlInputs}>\r\n                <InputLabel htmlFor={\"password\"}>Password</InputLabel>\r\n                <FormikCustomInput\r\n                    color={'primary'}\r\n                    id={\"password\"}\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.password}\r\n                    position='end'/>\r\n                {!!formik.errors.password &&\r\n                <FormHelperText id=\"password-error\">{formik.errors.password}</FormHelperText>}\r\n            </FormControl>\r\n            <FormControlLabel\r\n                control={<Checkbox icon={<FavoriteBorder />} checkedIcon={<Favorite />} name=\"rememberMe\"  value={formik.values.rememberMe} />}\r\n                label=\"Remember me\"\r\n            />\r\n            <div className={styles.forgotBox}>\r\n                <NavLink className={styles.navLinkForgotBox} to={'/auth/restore-password'}>\r\n                    <span>Forgot Password</span>\r\n                </NavLink>\r\n            </div>\r\n            <Button disabled={false} type={'submit'} className={styles.formButtons} variant=\"contained\"\r\n                    color=\"primary\">\r\n                Login\r\n            </Button>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector} from 'react-redux';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {AppStateType} from '../../../redux/store';\r\nimport {LoginForm} from \"./LoginForm/loginForm\";\r\nimport {CustomCheckbox} from \"../../common/checkbox/checkbox\";\r\nimport {Switch} from \"../../common/switch/switch\";\r\nimport {Checkbox, FormControlLabel} from \"@material-ui/core\";\r\nimport {Favorite, FavoriteBorder} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    styles: any\r\n}\r\n\r\nexport const Login: React.FC<PropsType> = ({styles, ...props}) => {\r\n\r\n    return (\r\n        <>\r\n            <h1>Cards</h1>\r\n            <h2>Sign In</h2>\r\n            <LoginForm\r\n                styles={styles}/>\r\n\r\n            <div className={styles.footerBox}>\r\n                <p>Don't have an account?</p>\r\n                <NavLink to={'registration'} className={styles.footerLink}>\r\n                    <span>Sign Up</span>\r\n                </NavLink>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Login;\r\n","import {authAPI} from \"../../api/cards-api\";\r\n\r\nexport const SUCCESS = 'registrationReducer/SUCCESS' as const\r\nexport const LOADING = 'registrationReducer/LOADING'as const\r\nexport const ERROR = 'registrationReducer/ERROR'as const\r\n\r\n\r\ntype InitialStateType = {\r\n\r\n    loading:boolean\r\n    error:string\r\n    registrationSuccess: boolean\r\n}\r\nconst initialState = {\r\n    registrationSuccess:false,\r\n    loading:false,\r\n    error:''\r\n}\r\ntype PropertiesType<ActionType> = ActionType extends {[key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof registrationActions>>\r\n\r\nconst registrationReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case SUCCESS: {\r\n            return {\r\n                ...state,\r\n                registrationSuccess: action.payload.registrationSuccess\r\n            }\r\n        }\r\n        case LOADING: {\r\n            return {\r\n                ...state,\r\n                error:'',\r\n                loading:action.payload.loading,\r\n                registrationSuccess:false\r\n            }\r\n        }\r\n        case ERROR: {\r\n            return {\r\n                ...state,\r\n                error:action.payload.error,\r\n                loading:false,\r\n                registrationSuccess:false\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const registrationActions = {\r\n    registrationAC: (registrationSuccess:boolean) => {\r\n        // data:addedUserType,\r\n        return ({\r\n            type: SUCCESS,\r\n            payload: {\r\n                // data,\r\n                registrationSuccess: registrationSuccess\r\n            }\r\n        })\r\n    },\r\n    registrationLoadingAC: (loading:boolean) => {\r\n        return({\r\n            type:LOADING,\r\n            payload : {\r\n                loading\r\n            }\r\n        })\r\n    },\r\n    registrationErrorAC: (error:string) => {\r\n        return({\r\n            type:ERROR,\r\n            payload : {\r\n                error\r\n            }\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const RegistrationTC = (email: string, password: string) => (dispatch: any) => {\r\n\r\n        dispatch(registrationActions.registrationLoadingAC(true))\r\n        authAPI.registration(email, password)\r\n            .then((data) => {\r\n                dispatch(registrationActions.registrationAC(true))\r\n                dispatch(registrationActions.registrationLoadingAC(false))\r\n            })\r\n            .catch((error) => {\r\n                dispatch(registrationActions.registrationErrorAC('error'))\r\n                console.log('error')\r\n            })\r\n\r\n}\r\n\r\nexport default registrationReducer;","import React, {FC} from 'react'\r\nimport {Button, FormControl, FormHelperText, Input, InputLabel} from \"@material-ui/core\";\r\nimport {FormikCustomInput} from \"../../../common/Input/input\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {RegistrationTC} from \"../../../../redux/registrationReducer/registrationReducer\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    passwordConfirm?: string\r\n}\r\ntype registrationFormType ={\r\n    styles:any\r\n}\r\nexport const RegistrationForm:FC<registrationFormType> = ({styles}) => {\r\n    const history = useHistory()\r\n    const onClickBack = () => {\r\n        history.goBack()\r\n    }\r\n    const dispatch = useDispatch();\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            passwordConfirm: ''\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'password is required';\r\n            } else if (values.password.length <= 7) {\r\n                errors.password = 'password must be at least 7 letters long';\r\n            }\r\n            if (values.password !== values.passwordConfirm) {\r\n                errors.passwordConfirm = 'passwords are not match'\r\n                errors.password = 'passwords are not match'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(RegistrationTC(values.email, values.password))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <FormControl {...formik.getFieldProps('email')}\r\n                         error={!!formik.errors.email}\r\n                         className={styles.controlInputs}>\r\n                <InputLabel htmlFor=\"email\">Email</InputLabel>\r\n                <Input id={\"email\"} value={formik.values.email} onChange={formik.handleChange} />\r\n                {!!formik.errors.email && <FormHelperText id=\"email\">{formik.errors.email}</FormHelperText>}\r\n            </FormControl>\r\n            <FormControl {...formik.getFieldProps('password')}\r\n                         error={!!formik.errors.password}\r\n                         className={styles.controlInputs}>\r\n                <InputLabel htmlFor={\"password\"}>Password</InputLabel>\r\n\r\n                <FormikCustomInput color={'primary'} id={'password'}\r\n                                   value={formik.values.password} onChange={formik.handleChange}\r\n                                   position={'end'}/>\r\n                {!!formik.errors.password &&\r\n                <FormHelperText id=\"password\">{formik.errors.password}</FormHelperText>}\r\n            </FormControl>\r\n\r\n            <FormControl {...formik.getFieldProps('passwordConfirm')}\r\n                         error={!!formik.errors.password}\r\n                         className={styles.controlInputs}>\r\n                <InputLabel htmlFor={\"passwordConfirm\"}>Confirm password</InputLabel>\r\n                <FormikCustomInput color={'primary'} id={'passwordConfirm'}\r\n                                   value={formik.values.passwordConfirm} onChange={formik.handleChange}\r\n                                   position={'end'}/>\r\n                {!!formik.errors.password &&\r\n                <FormHelperText id=\"passwordConfirm\">{formik.errors.password}</FormHelperText>}\r\n            </FormControl>\r\n            <div className={styles.btnContainer}>\r\n                <Button disabled={false} type={'button'} variant={\"contained\"}\r\n                        className={styles.formButtons}\r\n                        onClick={onClickBack}>\r\n                    Login\r\n                </Button>\r\n                <Button disabled={false} type={'submit'} variant={\"contained\"}\r\n                        className={styles.formButtons}\r\n                        color=\"primary\" >\r\n                    Login\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector} from \"react-redux\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from \"../../../redux/store\";\r\nimport {RegistrationForm} from \"./registrationForm/registrationForm\";\r\n\r\ntype PropsType = {\r\n    styles: any\r\n}\r\n\r\nconst Registration: React.FC<PropsType> = ({styles}) => {\r\n    const success = useSelector<AppStateType,boolean>(state => state.registrationReducer.registrationSuccess)\r\n\r\n\r\n    if(success) {\r\n        return <Redirect to={'/auth/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Cards</h1>\r\n            <h2>Sign Up</h2>\r\n            <RegistrationForm styles={styles}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Registration;\r\n","export default __webpack_public_path__ + \"static/media/mail-circle-icon.bc3a4042.svg\";","import React from 'react'\r\nimport emailCircleIcon from '../../../assets/img/svg/mail-circle-icon.svg';\r\n\r\ntype PropsType = {\r\n    styles: any\r\n}\r\n\r\nexport const CheckEmail: React.FC<PropsType> = ({styles, ...props}) => {\r\n    return (\r\n        <>\r\n            <h1>Cards</h1>\r\n            <img src={emailCircleIcon} alt={'email-circle-icon'} className={styles.imgSuccessAction} />\r\n            <h2>Check Email</h2>\r\n            <p>\r\n                We’ve sent an Email with instructions to example@mail.com\r\n            </p>\r\n        </>\r\n    )\r\n}","import {authAPI} from \"../../api/cards-api\";\r\n\r\nconst RESTORE = 'restoreReducer/RESTORE' as const;\r\nconst ERROR = 'restoreReducer/ERROR' as const;\r\nconst LOADING = 'restoreReducer/LOADING' as const;\r\n\r\ntype InitialStateType = {\r\n    email: boolean\r\n    error: string\r\n    loading: boolean\r\n}\r\n\r\ntype PropertiesType<ActionType> = ActionType extends { [key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof restoreActions>>\r\n\r\n\r\nexport const initialState: InitialStateType = {\r\n    email: false,\r\n    error: '',\r\n    loading: false,\r\n}\r\n\r\nconst restorePassReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case RESTORE : {\r\n            return ({\r\n                ...state,\r\n                email: action.payload.email,\r\n                loading: false,\r\n                error: ''\r\n            })\r\n\r\n        }\r\n        case ERROR : {\r\n            return ({\r\n                ...state,\r\n                email: false,\r\n                loading: false,\r\n                error: action.payload.error\r\n            })\r\n\r\n        }\r\n        case LOADING : {\r\n            return ({\r\n                ...state,\r\n                email: false,\r\n                loading: action.payload.loading,\r\n                error: ''\r\n            })\r\n\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const restoreActions = {\r\n    restoreEmailSuccessAC(email: boolean) {\r\n        return ({\r\n            type: RESTORE,\r\n            payload: {\r\n                email,\r\n            }\r\n        })\r\n    },\r\n    restoreEmailLoadingAC(loading: boolean) {\r\n        return ({\r\n            type: LOADING,\r\n            payload: {\r\n                loading,\r\n            }\r\n        })\r\n    },\r\n    restoreEmailErrorAC(error: string) {\r\n        return ({\r\n            type: ERROR,\r\n            payload: {\r\n                error,\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const RestoreMailTC = (email: string) => (dispatch: any) => {\r\n    dispatch(restoreActions.restoreEmailLoadingAC(true))\r\n    authAPI.restorePassword(email)\r\n        .then(data => {\r\n            console.log(data.info)\r\n            dispatch(restoreActions.restoreEmailSuccessAC(true))\r\n        }).catch((error) => {\r\n        dispatch(restoreActions.restoreEmailErrorAC('error'))\r\n        console.log('error')\r\n    })\r\n\r\n}\r\nexport default restorePassReducer;","import React, { FC } from 'react'\r\nimport {Button, FormControl, FormHelperText, Input, InputLabel} from \"@material-ui/core\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport {RestoreMailTC} from \"../../../../redux/restorePassReducer/restorePassReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype FormikErrorType = {\r\n    emailForRestore?: string\r\n}\r\ntype restorePassType = {\r\n    styles:any\r\n}\r\n\r\nexport const RestorePassForm:FC<restorePassType> = ({styles}) => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            emailForRestore: 'vvvvv',\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.emailForRestore) {\r\n                errors.emailForRestore = 'email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.emailForRestore)) {\r\n                errors.emailForRestore = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(RestoreMailTC(values.emailForRestore))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <h1>Cards</h1>\r\n            <h2>Forgot your password?</h2>\r\n            <FormControl className={styles.controlInputs}\r\n                         error={!!formik.errors.emailForRestore}\r\n                         {...formik.getFieldProps('emailForRestore')}>\r\n                <InputLabel htmlFor={\"emailForRestore\"}>Enter your email</InputLabel>\r\n                <Input id={\"emailForRestore\"}\r\n                       value={formik.values.emailForRestore}\r\n                       onChange={formik.handleChange}\r\n                       />\r\n            </FormControl>\r\n            {!!formik.errors.emailForRestore && <FormHelperText id=\"emailForRestore\">{formik.errors.emailForRestore}</FormHelperText>}\r\n\r\n            <p>\r\n                Enter your email address and we will send you further instructions\r\n            </p>\r\n            <Button disabled={false} type={'submit'}\r\n                    className={styles.formButtons}\r\n                    variant={\"contained\"}\r\n                    color={\"primary\"}\r\n            >\r\n                Send Instructions\r\n            </Button>\r\n            <div className={styles.footerBox}>\r\n                <p>Did you remember your password?</p>\r\n                <NavLink to={'registration'} className={styles.footerLink}>\r\n                    <span>Sign Up</span>\r\n                </NavLink>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\nimport {CheckEmail} from \"../Registration/CheckEmail\";\r\nimport {RestorePassForm} from \"./restorePassForm/RestorePassForm\";\r\n\r\ntype PropsType = {\r\n    styles: any\r\n}\r\n\r\nconst RestorePass: React.FC<PropsType> = ({styles, ...props}) => {\r\n    const email = useSelector<AppStateType,boolean>(state => state.restorePassReducer.email)\r\n\r\n    return (\r\n        <>\r\n            {email ? <CheckEmail styles={styles}/>\r\n                :\r\n                <>\r\n                    <RestorePassForm styles={styles}/>\r\n                </>\r\n            }</>\r\n    )\r\n}\r\n\r\nexport default RestorePass;\r\n","import {authAPI} from \"../../api/cards-api\";\r\n\r\nexport const CHANGE_PASS: string = 'changePassreducer/CHANGE_PASS';\r\n\r\n\r\nconst CHANGE = 'changePasswordReducer/CHANGE' as const;\r\nconst ERROR = 'changePasswordReducer/ERROR' as const;\r\nconst LOADING = 'changePasswordReducer/LOADING' as const;\r\n\r\n\r\ntype InitialStateType = {\r\n    successChangePass:boolean\r\n    loading:boolean\r\n    error:string\r\n}\r\n\r\ntype PropertiesType<ActionType> = ActionType extends {[key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof changePassActions>>\r\n\r\n\r\nexport const initialState: InitialStateType =  {\r\n    successChangePass:false,\r\n    loading:false,\r\n    error:''\r\n}\r\n\r\nconst changePassReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case CHANGE: {\r\n            return ({\r\n                ...state,\r\n                successChangePass:action.payload.success,\r\n                loading:false,\r\n                error:''\r\n            })\r\n        }\r\n        case ERROR: {\r\n            return ({\r\n                ...state,\r\n                successChangePass:false,\r\n                loading:false,\r\n                error:action.payload.error\r\n            })\r\n        }\r\n        case LOADING: {\r\n            return ({\r\n                ...state,\r\n                successChangePass:false,\r\n                loading:action.payload.loading,\r\n                error:''\r\n            })\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const changePassActions = {\r\n    successChangePassAC (success:boolean) {\r\n        return ({\r\n            type:CHANGE,\r\n            payload: {\r\n                success\r\n            }\r\n        })\r\n    },\r\n    loadingAC (loading:boolean) {\r\n        return ({\r\n            type:LOADING,\r\n            payload: {\r\n                loading\r\n            }\r\n        })\r\n    },\r\n    errorAC (error:string) {\r\n        return ({\r\n            type:ERROR,\r\n            payload: {\r\n                error\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const RestorePassTC = (password:string,resetPasswordToken:string) => (dispatch: any) => {\r\n        dispatch(changePassActions.loadingAC(true))\r\n        authAPI.setNewPassword(password,resetPasswordToken)\r\n            .then( data => {\r\n                console.log(`${data.data.info}`)\r\n               dispatch(changePassActions.successChangePassAC(true))\r\n                dispatch(changePassActions.loadingAC(false))\r\n            }).catch((error)=>{\r\n            dispatch(changePassActions.errorAC('error'))\r\n        })\r\n}\r\n\r\nexport default changePassReducer;","import React, {FC} from 'react'\r\nimport {Button, FormControl, FormHelperText, InputLabel} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {FormikCustomInput} from \"../../../common/Input/input\";\r\nimport {RestorePassTC} from \"../../../../redux/changePassReducer/changePassReducer\";\r\n\r\ntype FormPropsType = {\r\n    styles: any\r\n}\r\ntype FormikErrorType = {\r\n    password?: string\r\n    repeatPassword?: string\r\n    passwordLength?:string\r\n}\r\n\r\nexport const ChangePassForm: FC<FormPropsType> = ({styles, ...props}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const {token} = useParams<{ token: string }>()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            repeatPassword: '',\r\n\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!(values.password && values.repeatPassword)) {\r\n                errors.password = 'password is required';\r\n            } else if (values.password !== values.repeatPassword) {\r\n                errors.repeatPassword = 'passwords are not match'\r\n                errors.password = 'passwords are not match'\r\n            } else if (!(values.password.length <= 7 && values.repeatPassword.length <=7)) {\r\n                errors.passwordLength = 'passwords should be more then 7 symbols'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(RestorePassTC(values.password, token))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <FormControl\r\n                error={!!formik.errors.password }\r\n                {...formik.getFieldProps('password')}\r\n                className={styles.controlInputs}>\r\n                <InputLabel htmlFor={\"password\"}>Password</InputLabel>\r\n                <FormikCustomInput color={'primary'} id={'password'} name={'password'} value={formik.values.password}\r\n                                   onChange={formik.handleChange} position={'end'}/>\r\n            </FormControl>\r\n            <FormControl\r\n                {...formik.getFieldProps('repeatPassword')}\r\n                error={!!formik.errors.repeatPassword }\r\n                className={styles.controlInputs}>\r\n                <InputLabel htmlFor={\"repeatPassword\"}>Repeat password</InputLabel>\r\n                <FormikCustomInput color={'primary'} name={'repeatPassword'}  id={'repeatPassword'}\r\n                                   value={formik.values.repeatPassword}\r\n                                   onChange={formik.handleChange} position={'end'}/>\r\n                {formik.errors.repeatPassword && <FormHelperText id=\"repeatPassword\">{formik.errors.repeatPassword}</FormHelperText>}\r\n            </FormControl>\r\n            <Button type={'submit'} className={styles.formButtons} variant=\"contained\"\r\n                    color=\"primary\"\r\n            >\r\n                Change pass\r\n            </Button>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/store\";\r\nimport {ChangePassForm} from \"../ChangePassForm/ChangePassForm\";\r\n\r\ntype PropsType = {\r\n    styles: any\r\n}\r\n\r\nconst ChangePass: React.FC<PropsType> = ({styles, ...props}) => {\r\n\r\n    const success = useSelector<AppStateType, boolean>(state => state.changePassReducer.successChangePass)\r\n\r\n    if(success) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Cards</h1>\r\n            <h2>Sign Up</h2>\r\n            <ChangePassForm\r\n                styles={styles}\r\n            />\r\n            <p>\r\n                Create new password and we will send you further instructions to email\r\n            </p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChangePass;\r\n","import React from 'react';\r\nimport styles from '../Auth/Auth.module.scss';\r\nimport {Switch, Route, Redirect} from 'react-router-dom';\r\nimport Login from '../Login/Login';\r\nimport Registration from '../Registration/Registration';\r\nimport RestorePass from '../RestorePass/RestorePass';\r\nimport ChangePass from '../ChangePass/ChangePass/ChangePass';\r\nimport {useSelector} from \"react-redux\";\r\nimport { AppStateType } from '../../../redux/store';\r\nimport classNames from \"classnames\";\r\n\r\n\r\nexport const Auth: React.FC = (props) => {\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.authReducer.isLoggedIn)\r\n    const theme = useSelector<AppStateType, 'light'|'dark'>(state => state.appReducer.theme);\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={classNames(styles.box,({\r\n                [styles.dark] : theme === 'dark'\r\n            }))}>\r\n                <div className={styles.inner}>\r\n                    <Switch>\r\n                        <Route path={'/auth/login'} render={(props) => {\r\n                            if (isLoggedIn) {\r\n                                return (<Redirect to={'/profile'}/>)\r\n                            }\r\n                            return (<Login styles={styles}/>)\r\n                        }}/>\r\n                        <Route path={'/auth/registration'}\r\n                               render={(props) => <Registration styles={styles}/>}/>\r\n                        <Route path={'/auth/restore-password'}\r\n                               render={(props) => <RestorePass styles={styles}/>}/>\r\n                        <Route path={'/auth/change-password/:token?'}\r\n                               render={(props) => <ChangePass styles={styles}/>}/>\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth;\r\n","export default __webpack_public_path__ + \"static/media/preloaderAppleLight.aaa35fe9.svg\";","import {Dispatch} from \"redux\";\r\nimport {packType, packsAPI} from \"../../api/cards-api\";\r\nimport {appActions} from \"../appReducer/appReducer\";\r\nimport { authActions } from \"../authReducer/authReducer\";\r\nimport {AppStateType} from '../store';\r\n\r\nexport const SET_PACKS = 'packsReducer/SET-PACKS' as const;\r\nexport const SET_USER_PACKS = 'packsReducer/SET-USER-PACKS' as const;\r\nexport const SET_PAGE_COUNT = 'packsReducer/SET-PAGE-COUNT' as const;\r\nexport const SET_PAGE_NUMBER = 'packsReducer/SET-PAGE-NUMBER' as const;\r\nexport const SET_MIN_CARDS_COUNT = 'packsReducer/SET-MIN-CARDS-COUNT' as const;\r\nexport const SET_MAX_CARDS_COUNT = 'packsReducer/SET-MAX-CARDS-COUNT' as const;\r\nexport const SET_PACKS_TOTAL_COUNT = 'packsReducer/SET-PACKS-TOTAL-COUNT' as const;\r\nexport const SET_SORT_PACKS = 'packsReducer/SET-SORT-PACKS-ORDER' as const;\r\n\r\n\r\nexport type PacksParamsType = {\r\n    packName?: 'english'\r\n    min?: number\r\n    max?: number\r\n    page?: number // выбранная страница\r\n    pageCount?: number // количество элементов на странице\r\n    user_id?: string\r\n    sortPacks?: string\r\n}\r\n\r\ntype InitialStateType = {\r\n    cardPacks:packType[]\r\n    packsParams: PacksParamsType\r\n    cardPacksTotalCount: number\r\n    pageCounts: number[]\r\n}\r\n\r\nexport const initialState: InitialStateType = {\r\n    cardPacks: [] as packType[],\r\n    packsParams: {\r\n        min: 1,\r\n        max: 20,\r\n        page: 1,\r\n        pageCount: 10,\r\n        sortPacks: '0updated'\r\n    },\r\n    cardPacksTotalCount: 0,\r\n    pageCounts: [10, 20, 30, 50, 100]\r\n}\r\n\r\n\r\n\r\ntype PropertiesType<ActionType> = ActionType extends { [key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof packsActions>>\r\n\r\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_PACKS:{\r\n            return ({\r\n                ...state,\r\n                cardPacks: action.payload.packs\r\n            })\r\n        }\r\n        case SET_MIN_CARDS_COUNT: {\r\n            return ({\r\n                ...state,\r\n                packsParams: {...state.packsParams, min: action.payload.min}\r\n            })\r\n        }\r\n        case SET_MAX_CARDS_COUNT: {\r\n            return ({\r\n                ...state,\r\n                packsParams: {...state.packsParams, max: action.payload.max}\r\n            })\r\n        }\r\n        case SET_PAGE_COUNT: {\r\n            return ({\r\n                ...state,\r\n                packsParams: {...state.packsParams, pageCount: action.payload.pageCount}\r\n            })\r\n        }\r\n        case SET_PAGE_NUMBER: {\r\n            return ({\r\n                ...state,\r\n                packsParams: {...state.packsParams, page: action.payload.page}\r\n            })\r\n        }\r\n        case SET_PACKS_TOTAL_COUNT: {\r\n            return ({\r\n                ...state,\r\n                cardPacksTotalCount: action.payload.cardPacksTotalCount\r\n            })\r\n        }\r\n        case SET_SORT_PACKS: {\r\n            return ({\r\n                ...state,\r\n                packsParams: {...state.packsParams, sortPacks: action.payload.sortPacks}\r\n            })\r\n        }\r\n        // case SET_USER_PACKS:{\r\n        //     return ({\r\n        //         ...state,\r\n        //         cardPacks: action.payload.cards\r\n        //     })\r\n        // }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const packsActions = {\r\n    setPacks(packs: packType[]) {\r\n        return ({\r\n            type: SET_PACKS,\r\n            payload: {\r\n                packs\r\n            }\r\n        })\r\n    },\r\n    setPageCountAC(pageCount: number) {\r\n        return ({\r\n            type: SET_PAGE_COUNT,\r\n            payload: {\r\n                pageCount\r\n            }\r\n        })\r\n    },\r\n    setPageAC(page: number) {\r\n        return ({\r\n            type: SET_PAGE_NUMBER,\r\n            payload: {\r\n                page\r\n            }\r\n        })\r\n    },\r\n    setMinPacksCountAC(min: number) {\r\n        return ({\r\n            type: SET_MIN_CARDS_COUNT,\r\n            payload: {\r\n                min\r\n            }\r\n        })\r\n    },\r\n    setMaxPacksCountAC(max: number) {\r\n        return ({\r\n            type: SET_MAX_CARDS_COUNT,\r\n            payload: {\r\n                max\r\n            }\r\n        })\r\n    },\r\n    setTotalPacksCountAC(cardPacksTotalCount: number) {\r\n        return ({\r\n            type: SET_PACKS_TOTAL_COUNT,\r\n            payload: {\r\n                cardPacksTotalCount\r\n            }\r\n        })\r\n    },\r\n    setSortPacksAC(order: number, sortBy: string) {\r\n        return ({\r\n            type: SET_SORT_PACKS,\r\n            payload: {\r\n                sortPacks: `${order}${sortBy}`\r\n            }\r\n        })\r\n    },\r\n    setUserPacksAC(userId: string) {\r\n        return ({\r\n            type: SET_USER_PACKS,\r\n            payload: {\r\n                userId\r\n            }\r\n        })\r\n    },\r\n}\r\n\r\nexport const requestPacksTC = () => async (dispatch: Dispatch, getState: () => AppStateType) => {\r\n    dispatch(appActions.setAppStatusAC('loading'));\r\n    //названия параметров в стейте должно соответствовать параметрам get запроса\r\n    const params: PacksParamsType = getState().packsReducer.packsParams\r\n    try {\r\n        const res = await packsAPI.getPacks(params)\r\n        dispatch(packsActions.setPacks(res.cardPacks))\r\n        dispatch(packsActions.setTotalPacksCountAC(res.cardPacksTotalCount))\r\n        dispatch(appActions.setAppStatusAC('succeeded'))\r\n    }\r\n    catch (err) {\r\n        dispatch(appActions.setAppErrorAC('error'))\r\n        dispatch(appActions.setAppStatusAC('failed'))\r\n        dispatch(authActions.loginFlowAC(false))\r\n\r\n    }\r\n}\r\nexport const requestUserCardsTC = (user_id:string | undefined) => async (dispatch: Dispatch) => {\r\n    dispatch(appActions.setAppStatusAC('loading'))\r\n    let res = await packsAPI.getUserPacks(1000,4,user_id)\r\n    try {\r\n        dispatch(packsActions.setPacks(res.cardPacks))\r\n        dispatch(appActions.setAppStatusAC('succeeded'))\r\n    }\r\n    catch (err) {\r\n        dispatch(appActions.setAppErrorAC('error'))\r\n        dispatch(appActions.setAppStatusAC('failed'))\r\n    }\r\n}\r\nexport const createPackTC = () => async (dispatch: Dispatch) => {\r\n    dispatch(appActions.setAppStatusAC('loading'))\r\n    let res = await packsAPI.createPack()\r\n    let res1 = await packsAPI.getPacks()\r\n    try {\r\n        dispatch(packsActions.setPacks(res1.cardPacks))\r\n        dispatch(appActions.setAppStatusAC('succeeded'))\r\n    }\r\n    catch (err) {\r\n        dispatch(appActions.setAppErrorAC('error'))\r\n        dispatch(appActions.setAppStatusAC('failed'))\r\n    }\r\n}\r\nexport const deletePackTC = (packId:string) => async (dispatch: Dispatch) => {\r\n    dispatch(appActions.setAppStatusAC('loading'))\r\n    let res = await packsAPI.deletePack(packId)\r\n    let res1 = await packsAPI.getPacks()\r\n    try {\r\n        dispatch(packsActions.setPacks(res1.cardPacks))\r\n        dispatch(appActions.setAppStatusAC('succeeded'))\r\n    }\r\n    catch (err) {\r\n        dispatch(appActions.setAppErrorAC('error'))\r\n        dispatch(appActions.setAppStatusAC('failed'))\r\n    }\r\n}\r\nexport const updatePackTC = (packId:string,name:string) => async (dispatch: Dispatch) => {\r\n    dispatch(appActions.setAppStatusAC('loading'))\r\n    let res = await packsAPI.updatePack(packId,name)\r\n    let res1 = await packsAPI.getPacks()\r\n    try {\r\n        dispatch(packsActions.setPacks(res1.cardPacks))\r\n        dispatch(appActions.setAppStatusAC('succeeded'))\r\n    }\r\n    catch (err) {\r\n        dispatch(appActions.setAppErrorAC('error'))\r\n        dispatch(appActions.setAppStatusAC('failed'))\r\n    }\r\n}\r\n","import React, {FC, useState} from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport styles from './pack.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {deletePackTC, updatePackTC} from \"../../../../redux/PacksReducer/PacksReducer\";\r\nimport {RequestStatusType} from \"../../../../redux/appReducer/appReducer\";\r\nimport {AppStateType} from \"../../../../redux/store\";\r\nimport {requestCardsTC} from \"../../../../redux/cardsReducer/CardsReducer\";\r\n\r\n\r\ninterface packPropType {\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    name: string\r\n    path: string\r\n    cardsCount: number\r\n    grade: number\r\n    shots: number // количество попыток\r\n    rating: number // лайки\r\n    type: string // ещё будет \"folder\" (папка)\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    loading:RequestStatusType\r\n}\r\n\r\nexport const Pack:FC<packPropType> = ({user_name, name,cardsCount,updated,created,...props}) => {\r\n    const dispatch = useDispatch()\r\n    const [packName, setPackName] = useState('');\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deletePackTC(props._id))\r\n    }\r\n    const updateHandler = () => {\r\n        dispatch(updatePackTC(props._id,packName))\r\n    }\r\n    const changeHandler = (e:any) => {\r\n        setPackName(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>\r\n                <div>{name}</div>\r\n                <input type=\"text\" className={styles.input} value={packName} onChange={changeHandler}/>\r\n            </td>\r\n            <td>{cardsCount}</td>\r\n            <td>{updated}</td>\r\n            <td>{user_name}</td>\r\n            <td>\r\n                <button onClick={deleteHandler} disabled={props.loading === 'loading'}>del</button>\r\n                <button onClick={updateHandler}> update</button>\r\n                <NavLink\r\n                    to={`/cards/${props._id}/${name}`}>\r\n                    cards\r\n                </NavLink>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport styles from './Pagination.module.scss';\r\nimport cn from 'classnames';\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\nlet renderCount = 0;\r\n\r\nexport const Pagination: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n    console.log('render Pagination ' + ++renderCount)\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    let pages: number[] = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n\r\n    return (<div className={styles.pagination}>\r\n\r\n\r\n        <div className={styles.pagePanel}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={ () => { setPortionNumber(portionNumber - 1) } }\r\n            >Previus\r\n            </button>}\r\n\r\n            {pages\r\n                .filter(el => (el >= leftPortionPageNumber && el <= rightPortionPageNumber))\r\n                .map(p => {\r\n                    return <span className={ cn({[styles.selectedPage]: currentPage === p}, styles.pageNumber) }\r\n                                 onClick={(e) => {onPageChanged(p)}}\r\n                                 key={p}\r\n                    >\r\n                        {p}\r\n                    </span>\r\n                })\r\n            }\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>Next</button>\r\n            }\r\n        </div>\r\n\r\n    </div>)\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    createPackTC, packsActions,\r\n    requestPacksTC,\r\n    PacksParamsType,\r\n    requestUserCardsTC\r\n} from \"../../../redux/PacksReducer/PacksReducer\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\nimport {packType, ProfileResponseType} from \"../../../api/cards-api\";\r\nimport {Pack} from \"./pack/pack\";\r\nimport styles from './Packs.module.scss'\r\nimport { RequestStatusType } from '../../../redux/appReducer/appReducer';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Pagination} from './../../Pagination/Pagination';\r\nimport {Slider, Typography} from '@material-ui/core';\r\n\r\ntype OrderType = '' | 'asc' | 'desc';\r\ntype KeyType = 'updated' | 'cardsCount' | 'user_name' | 'name';\r\ntype SortByStateUIType = {\r\n    order: OrderType\r\n    key: KeyType\r\n}\r\n\r\nexport const Packs = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n    const packs = useSelector<AppStateType,packType[]>(state => state.packsReducer.cardPacks)\r\n    const user = useSelector<AppStateType,ProfileResponseType | null>(state => state.profileReducer.profile)\r\n    const profileId = useSelector<AppStateType,string | undefined>(state => state.profileReducer.profile?._id)\r\n    const error = useSelector<AppStateType,string >(state => state.appReducer.error)\r\n\r\n    const {\r\n            page = 1, pageCount = 10, min = 1, max = 10, packName, user_id, sortPacks\r\n    } = useSelector<AppStateType, PacksParamsType>(state => state.packsReducer.packsParams);\r\n    const pageCounts = useSelector<AppStateType, number[]>(state => state.packsReducer.pageCounts);\r\n    const cardPacksTotalCount = useSelector<AppStateType, number>(state => state.packsReducer.cardPacksTotalCount);\r\n    const loading = useSelector<AppStateType,RequestStatusType>(state => state.appReducer.status);\r\n\r\n    const [sortByStateUI, setSortByStateUI] = useState<SortByStateUIType>({\r\n        order: '',\r\n        key: 'updated'\r\n    })\r\n    const [range, setRange] = useState<number[]>([min, max]);\r\n    const [ckeck, setCkeck] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n         dispatch(requestPacksTC())\r\n        console.log('page changed ' + page)\r\n    },[page, pageCount, sortPacks, min, max])\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(createPackTC())\r\n    }\r\n    const onChangehandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            e.currentTarget.checked ? dispatch(requestUserCardsTC(profileId)) : dispatch(requestPacksTC())\r\n            setCkeck(e.currentTarget.checked)\r\n    }\r\n\r\n    const onPageChangedHandle = (curPage: number): void => {\r\n        dispatch(packsActions.setPageAC(curPage))\r\n    }\r\n    const onChangePageCountHandle = (e: ChangeEvent<HTMLSelectElement>): void => {\r\n        const pageCount = Number(e.currentTarget.value)\r\n        dispatch(packsActions.setPageCountAC(pageCount))\r\n    }\r\n    const minPacksSizeHandler = (minSize: string): void => {\r\n        const intMinValue: number = (+minSize > 0 && +minSize < 1000) ? +minSize : 1;\r\n        dispatch(packsActions.setMinPacksCountAC(intMinValue))\r\n    }\r\n    const maxPacksSizeHandler = (maxSize: string): void => {\r\n        const intMaxValue: number = (+maxSize > min && +maxSize < 1000) ? +maxSize : min;\r\n        dispatch(packsActions.setMaxPacksCountAC(intMaxValue))\r\n    }\r\n\r\n    const onChangePacksSizeHandle = (e: ChangeEvent<{}>, newRange: number | number[]): void => {\r\n        console.log(newRange)\r\n        setRange(newRange as number[])\r\n    }\r\n\r\n    const onClickSortByHandle = (key: KeyType = 'updated') => {\r\n        const order: OrderType = sortByStateUI.order === 'asc' ? 'desc' : 'asc';\r\n        const intOrder: number = order === 'desc' ? 1 : 0;\r\n\r\n        dispatch(packsActions.setSortPacksAC(intOrder, key));\r\n        setSortByStateUI(prev => ( {order, key} ));\r\n        console.log(intOrder + key + '')\r\n    }\r\n\r\n    // const onClickPacksSortByName = () => {\r\n    //     setPacksUI(prevPacksUI => {\r\n    //         return prevPacksUI?.sort( (a, b) => {\r\n    //             if (sortByStateUI.byName) {\r\n    //                 setSortByStateUI(prev => ({...prev, byName: !prev.byName}))\r\n    //                 return ( (a.name < b.name) ? -1 : 1 )\r\n    //             } else {\r\n    //                 setSortByStateUI(prev => ({...prev, byName: !prev.byName}));\r\n    //                 return (a.name > b.name ? -1 : 1 )\r\n    //             }\r\n    //         })\r\n    //     })\r\n    // }\r\n    // const onClickPacksSortByCount = () => {\r\n    //     setPacksUI(prevPacksUI => {\r\n    //         return prevPacksUI?.sort( (a, b) => {\r\n    //             if (sortByStateUI.byCount) {\r\n    //                 setSortByStateUI(prev => ({...prev, byCount: !prev.byCount}))\r\n    //                 return ( (a.cardsCount < b.cardsCount) ? -1 : 1 )\r\n    //             } else {\r\n    //                 setSortByStateUI(prev => ({...prev, byCount: !prev.byCount}));\r\n    //                 return (a.cardsCount > b.cardsCount ? -1 : 1 )\r\n    //             }\r\n    //         })\r\n    //     })\r\n    // }\r\n\r\n    if(user === null) {\r\n        return <Redirect to={'/auth/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.box}>\r\n                <div className={styles.columnParams}>\r\n                    <label htmlFor=\"check\">\r\n                        show only my cards\r\n                        <input type=\"checkbox\"\r\n                               id={'check'}\r\n                               checked={ckeck}\r\n                               onChange={onChangehandler}\r\n                        />\r\n\r\n                    </label>\r\n                    <Typography id=\"range-slider\" gutterBottom>\r\n                        Number of cards\r\n                    </Typography>\r\n                    <Slider\r\n                        value={range}\r\n                        onChange={onChangePacksSizeHandle}\r\n                        min={0}\r\n                        max={120}\r\n                        valueLabelDisplay=\"auto\"\r\n                        aria-labelledby=\"range-slider\"\r\n                        // getAriaValueText={valuetext}\r\n                    />\r\n                </div>\r\n                <div className={styles.columnContent}>\r\n\r\n                    <div className={styles.packs}>\r\n                        <h1>Packs list</h1>\r\n                        <table className={styles.tableBox}>\r\n                            <tr>\r\n                                <th>\r\n                                    <button onClick={() => onClickSortByHandle('name')}>Name</button>\r\n                                </th>\r\n                                <th>\r\n                                    <button onClick={() => onClickSortByHandle('cardsCount')}>Stack</button>\r\n                                </th>\r\n                                <th>\r\n                                    <button onClick={() => onClickSortByHandle('updated')}> Update</button>\r\n                                </th>\r\n                                <th>\r\n                                    <button onClick={() => onClickSortByHandle('user_name')}> sort by author</button>\r\n                                </th>\r\n                                <th>\r\n                                    <button onClick={onClickHandler} disabled={loading === 'loading'}>add</button>\r\n                                </th>\r\n                            </tr>\r\n                            {packs.map(pack => {\r\n                                return (\r\n                                    <Pack\r\n                                        loading={loading}\r\n                                        key={pack._id}\r\n                                        __v={pack.__v}\r\n                                        _id={pack._id}\r\n                                        grade={pack.grade}\r\n                                        path={pack.path}\r\n                                        rating={pack.rating}\r\n                                        shots={pack.shots}\r\n                                        user_id={pack.user_id}\r\n                                        type={pack.type}\r\n                                        name={pack.name}\r\n                                        user_name={pack.user_name}\r\n                                        updated={pack.updated}\r\n                                        created={pack.created}\r\n                                        cardsCount={pack.cardsCount}/>\r\n                                )\r\n                            })}\r\n                        </table>\r\n                        <div className={styles.tableSettings}>\r\n                            <Pagination totalItemsCount={cardPacksTotalCount}\r\n                                        pageSize={pageCount}\r\n                                        portionSize={10}\r\n                                        currentPage={page}\r\n                                        onPageChanged={onPageChangedHandle}\r\n                            />\r\n                            <span className={styles.paramsName}>Select a Page size: </span>\r\n                            <select id={'selectPageCount'} value={pageCount} onChange={onChangePageCountHandle}>\r\n                                {pageCounts.map((pcValue, i) => {\r\n                                    return (\r\n                                        <option key={`${i}`} value={pcValue}>{pcValue}</option>\r\n                                    )\r\n                                })}\r\n                            </select>\r\n                        </div>\r\n                        <div>\r\n                            <input className={styles.paramsInput}\r\n                                   onBlur={(e) => minPacksSizeHandler(e.currentTarget.value)}\r\n                                   onKeyPress={(e) => (e.key === 'Enter' && minPacksSizeHandler(e.currentTarget.value))}\r\n                            />\r\n                            <span className={styles.paramsName}>{min}</span>\r\n                            <input className={styles.paramsInput}\r\n                                   onBlur={(e) => maxPacksSizeHandler(e.currentTarget.value)}\r\n                                   onKeyPress={(e) => (e.key === 'Enter' && maxPacksSizeHandler(e.currentTarget.value))}\r\n                            />\r\n                            <span className={styles.paramsName}>{max}</span>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React, {FC} from 'react'\r\nimport {cardType} from \"../../../../api/cards-api\";\r\nimport styles from \"./Card.module.scss\";\r\n\r\n\r\nexport const Card:FC<cardType> = ({user_id,_id,created,updated,grade,type,rating,cardsPack_id,question,shots,answer,...props}) => {\r\n\r\n    return (\r\n        <div className={styles.card}>\r\n            <div>\r\n                {question}\r\n            </div>\r\n            <div>{answer}</div>\r\n            <div>{updated}</div>\r\n            <div>{grade.toFixed(2)}</div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { FC } from 'react'\r\nimport styles from './table.module.scss'\r\nimport {Card} from \"../../Main/Cards/Card/Card\";\r\nimport {cardType} from \"../../../api/cards-api\";\r\n\r\n\r\ntype TablePropsType = {\r\n    items:cardType[]\r\n}\r\nexport const Table:FC<TablePropsType> = ({items}) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.box}>\r\n                <div className={styles.inner}>\r\n                    <div className={styles.tableHeader}>\r\n                        <div>Question</div>\r\n                        <div>answer</div>\r\n                        <div>Last Updated</div>\r\n                        <div>Grade</div>\r\n                    </div>\r\n                    {items.map(item => {\r\n                        return (\r\n                            <Card {...item}\r\n                            />\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n","import {cardsAPI, cardType} from \"../../api/cards-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../store\";\r\nimport {appActions} from \"../appReducer/appReducer\";\r\n\r\n\r\nconst SET_CARDS = 'changePasswordReducer/SET_CARDS' as const;\r\n\r\n\r\ntype InitialStateType = {\r\n    cards: cardType[]\r\n\r\n}\r\n\r\ntype PropertiesType<ActionType> = ActionType extends { [key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof cardsActions>>\r\n\r\n\r\nexport const initialState: InitialStateType = {\r\n    cards: [],\r\n}\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_CARDS: {\r\n            return ({\r\n                ...state,\r\n                cards: action.payload.cards\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const cardsActions = {\r\n    setCards(cards: cardType[]) {\r\n        return ({\r\n            type: SET_CARDS,\r\n            payload: {\r\n                cards\r\n            }\r\n        })\r\n    },\r\n}\r\nexport const requestCardsTC = (cardsPackId: string ) => async (dispatch: Dispatch) => {\r\n    dispatch(appActions.setAppStatusAC('loading'));\r\n    try {\r\n        const res = await cardsAPI.getCards(cardsPackId)\r\n        dispatch(cardsActions.setCards(res.cards))\r\n    } catch (err) {\r\n        dispatch(appActions.setAppErrorAC('error'))\r\n        dispatch(appActions.setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\nexport default cardsReducer;\r\n","import React, {useEffect} from 'react'\r\nimport styles from \"./Cards.module.scss\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\nimport {cardType} from \"../../../api/cards-api\";\r\nimport { Table } from '../../common/table/table';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {requestCardsTC} from \"../../../redux/cardsReducer/CardsReducer\";\r\n\r\n\r\n\r\n\r\nexport const Cards = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    // @ts-ignore\r\n    const {id,name} = useParams()\r\n    const cards = useSelector<AppStateType,cardType[]>(state => state.cardsReducer.cards)\r\n    debugger\r\n    useEffect(() => {\r\n        dispatch(requestCardsTC(id))\r\n    },[dispatch,id])\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.box}>\r\n                <div className={styles.inner}>\r\n                   <h2>{name}</h2>\r\n                    <input type=\"text\"/>\r\n\r\n                    <Table items={cards}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport Header from './components/Header/Header';\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport Profile from \"./components/Main/Profile/Profile\";\r\nimport {PageNotFounded} from \"./components/Main/PageNotFounded/PageNotFounded\";\r\nimport Auth from './components/Main/Auth/Auth';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./redux/store\";\r\nimport styles from './App.module.scss'\r\nimport preloader from './assets/icons/preloaderAppleLight.svg';\r\nimport { ProfileResponseType } from './api/cards-api';\r\nimport {Packs} from \"./components/Main/Packs/Packs\";\r\nimport {Cards} from \"./components/Main/Cards/Cards\";\r\nimport classNames from \"classnames\";\r\nimport {authMeTC} from \"./redux/authReducer/authReducer\";\r\n\r\nconst PATH = {\r\n    AUTH: '/auth',\r\n    LOGIN: 'auth/login',\r\n    PROFILE: '/profile',\r\n    PACKS: '/packs',\r\n    CARDS: '/cards/:id/:name',\r\n}\r\n\r\n\r\nconst App = (props: any) => {\r\n    const initializing = useSelector<AppStateType, boolean>(state => state.appReducer.initializing);\r\n    const theme = useSelector<AppStateType, 'light'|'dark'>(state => state.appReducer.theme);\r\n    const isLoggedIn = useSelector<AppStateType, boolean | null>( state => state.authReducer.isLoggedIn);\r\n    const profile = useSelector<AppStateType, ProfileResponseType | null>(state => state.profileReducer.profile);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(authMeTC())\r\n    },[isLoggedIn])\r\n\r\n\r\n    if (initializing) {\r\n        return (<div className={'initializePreloader'}>\r\n            <img src={preloader} alt={'initialize preloader'}/>\r\n        </div>)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={classNames(styles.app, ({\r\n                [styles.appDark]: theme === 'dark',\r\n                [styles.app]: theme === 'light'\r\n            }))}\r\n            />\r\n            <Header/>\r\n            <Switch>\r\n                <Route path={'/'} exact render={() => {\r\n                    if (profile !== null && isLoggedIn) {\r\n                        return (<Redirect to={PATH.PROFILE}/>);\r\n                    }\r\n                    return (<Redirect to={PATH.LOGIN}/>)\r\n                }}/>\r\n                <Route path={PATH.AUTH} render={() => <Auth/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n                <Route path={PATH.CARDS} render={() => <Cards/>}/>\r\n                <Route render={() => <PageNotFounded/>}/>\r\n            </Switch>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport authReducer from './authReducer/authReducer';\r\nimport profileReducer from './profileReducer/profileReducer';\r\nimport registrationReducer from './registrationReducer/registrationReducer';\r\nimport restorePassReducer from './restorePassReducer/restorePassReducer';\r\nimport changePassReducer from './changePassReducer/changePassReducer';\r\nimport appReducer from \"./appReducer/appReducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport {packsReducer} from \"./PacksReducer/PacksReducer\";\r\nimport cardsReducer from \"./cardsReducer/CardsReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    authReducer,\r\n    profileReducer,\r\n    registrationReducer,\r\n    restorePassReducer,\r\n    changePassReducer,\r\n    appReducer,\r\n    packsReducer,\r\n    cardsReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(\r\n    applyMiddleware(thunk),\r\n    // other store enhancers if any\r\n));\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport './fonts.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './redux/store';\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\nimport {createMuiTheme} from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        htmlFontSize: 10\r\n    },\r\n    overrides: {\r\n        MuiInputBase: {\r\n            root: {\r\n                color: \"rgb(45, 46, 70)\"\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <ThemeProvider theme={theme}>\r\n            <App/>\r\n            </ThemeProvider>\r\n        </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Packs_container__2MHmy\",\"box\":\"Packs_box__1ObJP\",\"columnParams\":\"Packs_columnParams__9PZt0\",\"columnContent\":\"Packs_columnContent__2BNn5\",\"tableBox\":\"Packs_tableBox__3t6sz\",\"tableSettings\":\"Packs_tableSettings__QUNCP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Auth_container__3okAI\",\"box\":\"Auth_box__3krmo\",\"inner\":\"Auth_inner__2tKgn\",\"imgSuccessAction\":\"Auth_imgSuccessAction__1a_gq\",\"controlInputs\":\"Auth_controlInputs__2syNu\",\"btnContainer\":\"Auth_btnContainer__2ynGi\",\"formButtons\":\"Auth_formButtons__3vsA_\",\"btn\":\"Auth_btn__1Ishi\",\"forgotBox\":\"Auth_forgotBox__34kiU\",\"navLinkForgotBox\":\"Auth_navLinkForgotBox__2Pf6y\",\"footerBox\":\"Auth_footerBox__ihT55\",\"footerLink\":\"Auth_footerLink__1S8SW\",\"dark\":\"Auth_dark__3K6-E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navList\":\"Navigation_navList__R7kXu\",\"navLinkItem\":\"Navigation_navLinkItem__15_wa\",\"menuLink\":\"Navigation_menuLink__2MHep\",\"menuLinkActive\":\"Navigation_menuLinkActive__3LIUJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__2GAGc\",\"pagePanel\":\"Pagination_pagePanel__29iN5\",\"pageNumber\":\"Pagination_pageNumber__3w0w0\",\"selectedPage\":\"Pagination_selectedPage__vtrIV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"table_container__3LW6X\",\"box\":\"table_box__tMnHm\",\"inner\":\"table_inner__DOUqG\",\"tableHeader\":\"table_tableHeader__1R7go\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2wtUi\",\"app\":\"App_app__KsShV\",\"appDark\":\"App_appDark__2tqPK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1pWDv\",\"box\":\"Cards_box__1ZEEp\",\"inner\":\"Cards_inner__2BjS3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2gn6p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"pack_input__K0Tcy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1yUk2\"};"],"sourceRoot":""}