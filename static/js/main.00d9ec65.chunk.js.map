{"version":3,"sources":["components/Main/Main.module.css","components/common/Button/Button.module.css","components/common/Input/Input.module.css","components/Header/Header.module.css","components/Main/Profile/Profile.tsx","components/Main/Login/Login.tsx","components/Main/RestorePass/RestorePass.tsx","components/Main/ChangePass/ChangePass.tsx","components/Main/Registration/Registration.tsx","components/common/Button/Button.tsx","components/common/Input/Input.tsx","components/Main/Main.tsx","components/Header/Navigation/Navigation.tsx","components/Header/Header.tsx","App.tsx","serviceWorker.ts","redux/testReducer.ts","redux/loginReducer.ts","redux/profileReducer.ts","redux/registrationReducer.ts","redux/restorePassReducer.ts","redux/changePassReducer.ts","redux/store.ts","index.tsx","components/Header/Navigation/Navigation.module.css"],"names":["module","exports","Profile","props","className","Login","RestorePass","ChangePass","Registration","Button","styles","mainButton","type","Input","placeholder","mainInput","Main","wrap","testText","col","path","render","Navigation","useState","name","tempState","navLinks","map","link","index","key","navLinkItem","to","toLowerCase","menuLink","activeClassName","menuLinkActive","navList","Header","header","App","Boolean","window","location","hostname","match","initialState","test","testReducer","state","action","users","id","login","email","password","loginReducer","profileInfo","sex","dateOfBirth","city","country","status","profileReducer","registrationReducer","restorePassReducer","oldPassword","newPassword","changePassReducer","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00d9ec65.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Main_wrap__233zY\",\"col\":\"Main_col__uUs2l\",\"testText\":\"Main_testText__2_2vy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainButton\":\"Button_mainButton__2PD8S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainInput\":\"Input_mainInput__2bs3L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__32lH_\"};","import React from 'react';\r\n\r\nconst Profile = (props: any) => {\r\n    return <div className='profile'>\r\n        <span>Profile</span>\r\n    </div>\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\n\r\nconst Login = (props: any) => {\r\n    return <div className='login'>\r\n        <span>Login</span>\r\n    </div>\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\n\r\nconst RestorePass = (props: any) => {\r\n    return <div className='restorePass'>\r\n        <span>RestorePass</span>\r\n    </div>\r\n}\r\n\r\nexport default RestorePass;","import React from 'react';\r\n\r\nconst ChangePass = (props: any) => {\r\n    return <div className='changePass'>\r\n        <span>ChangePass</span>\r\n    </div>\r\n}\r\n\r\nexport default ChangePass;","import React from 'react';\r\n\r\nconst Registration = (props: any) => {\r\n    return <div className='registration'>\r\n        <span>Registration</span>\r\n    </div>\r\n}\r\n\r\nexport default Registration;","import React from 'react';\r\nimport styles from './Button.module.css';\r\n\r\nconst Button = (props: any) => {\r\n    let btnSign:string = 'button'\r\n    return <button className={styles.mainButton} type='submit'>\r\n        {btnSign}\r\n    </button>\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport styles from './Input.module.css';\r\nconst Input = (props: any) => {\r\n    let placeHolder: string = 'Введите текст';\r\n    return <input type='text' placeholder={placeHolder} className={styles.mainInput}/>\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport styles from './Main.module.css';\r\nimport Profile from './Profile/Profile';\r\nimport Login from './Login/Login';\r\nimport RestorePass from './RestorePass/RestorePass';\r\nimport ChangePass from './ChangePass/ChangePass';\r\nimport Registration from './Registration/Registration';\r\nimport { Route } from 'react-router-dom';\r\nimport Button from '../common/Button/Button';\r\nimport Input from '../common/Input/Input';\r\n\r\nconst Main = (props: any) => {\r\n\r\n    return(\r\n        <div className={styles.wrap}>\r\n            <p className={styles.testText}>Main</p>\r\n            <div className={styles.col}>\r\n                <Input/>\r\n                <Button />\r\n            </div>\r\n            <Route path='/login' render={() => <Login/>}/>\r\n            <Route path='/profile' render={() => <Profile/>}/>\r\n            <Route path='/restorepass' render={() => <RestorePass/>}/>\r\n            <Route path='/changepass' render={() => <ChangePass/>}/>\r\n            <Route path='/registration' render={() => <Registration/>}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import React, {useState} from 'react';\r\nimport styles from './Navigation.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Navigation = (props: any) => {\r\n\r\n    let [tempState, setTempState] = useState( [{name: 'Login'}, {name: 'Registration'}, {name: 'RestorePass'}, {name: 'ChangePass'}, {name: 'Profile'}]);\r\n\r\n    let navLinks = tempState.map((link:{name:string}, index:number) => {\r\n        return <li key={index} className={styles.navLinkItem}>\r\n            <NavLink to={`/${(link.name).toLowerCase()}`} className={styles.menuLink} activeClassName={styles.menuLinkActive}>\r\n                <span>{link.name}</span>\r\n            </NavLink>\r\n        </li>\r\n    })\r\n\r\n    return <ul className={styles.navList}>\r\n        {navLinks}\r\n    </ul>\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Navigation from './Navigation/Navigation';\r\nimport styles from './Header.module.css';\r\n\r\nconst Header = (props: any) => {\r\n    return <div className={styles.header}>\r\n        <Navigation/>\r\n    </div>\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Main from './components/Main/Main';\nimport Header from './components/Header/Header';\n\nconst App = (props: any) => {\n  return (\n    <div className=\"App\">\n        <Header />\n        <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const TEST_CONSTANT = 'testReducer/TEST-CONSTANT';\r\n\r\nconst initialState = {\r\n    test: 'test'\r\n};\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const testReducer = (state: InitialStateType = initialState, action: TestActionType):InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        default: return state;\r\n    }\r\n}\r\ntype actionsType = TestActionType;\r\n\r\nexport const action:{type: string} = {\r\n    type: TEST_CONSTANT\r\n}\r\nexport type TestActionType = {\r\n    type: typeof TEST_CONSTANT\r\n};\r\n\r\nexport default testReducer;","export const LOGIN_ACTION: string = 'loginReducer/TEST-REDUCER';\r\n\r\ntype UserType = {\r\n    id: number,\r\n    login: string\r\n    email: string\r\n    password: string\r\n}\r\n\r\ntype InitialStateType = {\r\n    users: UserType[]\r\n}\r\n\r\ntype ActionsType = loginAction;\r\n\r\n\r\nexport const initialState: InitialStateType =  {\r\n    users: [\r\n        {id: 1, login: 'testName', email: 'glek@gmail.com', password: 'valakas54'}\r\n    ]\r\n}\r\n\r\nconst loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        default: return state\r\n    }\r\n}\r\n\r\ntype loginAction = {\r\n    type: typeof LOGIN_ACTION\r\n}\r\n\r\nconst loginAction = {\r\n    type: LOGIN_ACTION\r\n}\r\n\r\nexport default loginReducer;","export const PROFILE_ACTION: string = 'profileReducer/TEST-REDUCER';\r\n\r\ntype ProfileInfoType = {\r\n    id: number,\r\n    sex: string\r\n    email: string\r\n    dateOfBirth: string\r\n    city: string\r\n    country: string\r\n    status: string\r\n}\r\n\r\ntype InitialStateType = {\r\n    profileInfo: ProfileInfoType\r\n}\r\n\r\ntype ActionsType = loginAction;\r\n\r\n\r\nexport const initialState: InitialStateType =  {\r\n    profileInfo: {id: 1, sex: 'male', email: 'valakas@gmail.com', dateOfBirth: '29.02.1966', city: 'Samara', country: 'Ukraine', status: '---'}\r\n}\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        default: return state\r\n    }\r\n}\r\n\r\ntype loginAction = {\r\n    type: typeof PROFILE_ACTION\r\n}\r\n\r\nconst loginAction = {\r\n    type: PROFILE_ACTION\r\n}\r\n\r\nexport default profileReducer;","export const REGISTRATION_ACTION: string = 'registrationReducer/REG-ACTION';\r\n\r\ntype RegistrationDataType = {\r\n    email: string\r\n    sex: string\r\n    dateOfBirth: string\r\n    city: string\r\n    country: string\r\n}\r\n\r\ntype InitialStateType = {\r\n    profileInfo: RegistrationDataType\r\n}\r\n\r\ntype ActionsType = RegActionType;\r\n\r\nexport const initialState: InitialStateType =  {\r\n    profileInfo: { email: 'valakas@gmail.com', sex: 'male', dateOfBirth: '29.02.1966', city: 'Samara', country: 'Ukraine' }\r\n}\r\n\r\nconst registrationReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        default: return state\r\n    }\r\n}\r\n\r\ntype RegActionType = {\r\n    type: typeof REGISTRATION_ACTION\r\n}\r\n\r\nconst regAction: RegActionType = {\r\n    type: REGISTRATION_ACTION\r\n}\r\n\r\nexport default registrationReducer;","export const RESTORE_ACTION: string = 'registrationReducer/RESTORE-ACTION';\r\n\r\ntype InitialStateType = {\r\n    email: string\r\n}\r\n\r\ntype ActionsType = RestoreActionType;\r\n\r\nexport const initialState: InitialStateType =  {\r\n    email: 'valakas54@gmail.com'\r\n}\r\n\r\nconst restorePassReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        default: return state\r\n    }\r\n}\r\n\r\ntype RestoreActionType = {\r\n    type: typeof RESTORE_ACTION\r\n}\r\n\r\nconst restoreAction: RestoreActionType = {\r\n    type: RESTORE_ACTION\r\n}\r\n\r\nexport default restorePassReducer;","export const CHANGEPASS_ACTION: string = 'registrationReducer/CHANGEPASS-ACTION';\r\n\r\ntype InitialStateType = {\r\n    oldPassword: string,\r\n    newPassword: string\r\n}\r\n\r\ntype ActionsType = ChangePassActionType;\r\n\r\nexport const initialState: InitialStateType =  {\r\n    oldPassword: 'gladiko',\r\n    newPassword: 'gladilko'\r\n}\r\n\r\nconst changePassReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        default: return state\r\n    }\r\n}\r\n\r\ntype ChangePassActionType = {\r\n    type: typeof CHANGEPASS_ACTION\r\n}\r\n\r\nconst changePassAction: ChangePassActionType = {\r\n    type: CHANGEPASS_ACTION\r\n}\r\n\r\nexport default changePassReducer;","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport testReducer from './testReducer';\r\nimport thunk from 'redux-thunk';\r\nimport loginReducer from './loginReducer';\r\nimport profileReducer from './profileReducer';\r\nimport registrationReducer from './registrationReducer';\r\nimport restorePassReducer from './restorePassReducer';\r\nimport changePassReducer from './changePassReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    testReducer,\r\n    loginReducer,\r\n    profileReducer,\r\n    registrationReducer,\r\n    restorePassReducer,\r\n    changePassReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navList\":\"Navigation_navList__vxI2i\",\"navLinkItem\":\"Navigation_navLinkItem__1kd1i\",\"menuLink\":\"Navigation_menuLink__299QP\",\"menuLinkActive\":\"Navigation_menuLinkActive__2fEvE\"};"],"sourceRoot":""}