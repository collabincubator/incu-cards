{"version":3,"sources":["api/cards-api.ts","redux/loginReducer/loginReducer.ts","components/Header/Navigation/Navigation.tsx","components/Header/Header.tsx","redux/profileReducer/profileReducer.ts","components/Main/Profile/Profile.tsx","components/Main/PageNotFounded/PageNotFounded.tsx","components/common/Button/Button.tsx","components/common/InputPass/InputPass.tsx","components/Main/Main.tsx","components/Main/Login/Login.tsx","redux/registrationReducer/registrationReducer.ts","components/Main/Registration/Registration.tsx","redux/restorePassReducer/restorePassReducer.ts","assets/img/svg/mail-circle-icon.svg","components/Main/Registration/CheckEmail.tsx","components/Main/RestorePass/RestorePass.tsx","redux/changePassReducer/changePassReducer.ts","components/Main/ChangePass/ChangePass.tsx","components/Main/Auth/Auth.tsx","App.tsx","serviceWorker.ts","redux/testReducer/testReducer.ts","redux/store.ts","index.tsx","components/Main/Auth/Auth.module.scss","components/Main/ChangePass/ChangePass.module.scss","components/common/InputPass/InputPass.module.scss","components/Header/Navigation/Navigation.module.css","components/Main/Main.module.scss","components/Header/Header.module.css","components/common/Button/Button.module.css"],"names":["cardsRequest","axios","create","baseURL","withCredentials","authAPI","email","password","post","then","res","data","rememberMe","delete","resetPasswordToken","from","message","LOGIN","ERROR","LOG_FLOW","initialState","users","isLoggedIn","error","actions","type","payload","loginTC","dispatch","catch","console","log","loginReducer","state","action","Navigation","props","useDispatch","useState","name","path","tempState","navLinks","map","link","index","className","styles","navLinkItem","to","toLowerCase","menuLink","activeClassName","menuLinkActive","navList","variant","color","onClick","Header","header","PROFILE_ACTION","profileInfo","id","sex","dateOfBirth","city","country","status","fetchProfileTC","setProfileAC","profileReducer","Profile","useSelector","profileState","useEffect","PageNotFounded","Button","mainButton","InputPass","React","memo","placeholder","value","isBlind","setIsBlind","passInputBox","inputText","onChange","passToggleBtn","icon","faEye","faEyeSlash","eyeToggleIcon","prev","Main","wrap","container","box","Login","setEmail","pass","setPass","setEmailHandler","useCallback","e","currentTarget","setPassHandler","formik","useFormik","initialValues","validate","values","onSubmit","handleSubmit","FormControl","getFieldProps","errors","controlInputs","InputLabel","htmlFor","Input","aria-describedby","FormHelperText","endAdornment","InputAdornment","position","IconButton","aria-label","VisibilityOff","Visibility","forgotBox","navLinkForgotBox","disabled","formButtons","signUpBox","signUpLink","SUCCESS","LOADING","registrationSuccess","loading","registrationReducer","Registration","passSecond","setPassSecond","passwordConfirm","alert","JSON","stringify","history","useHistory","succeess","err","setPassConfHandler","isBlindPassConf","setIsBlindPassConf","style","btnContainer","goBack","RegistrationTC","RESTORE","restorePassReducer","CheckEmail","src","emailCircleIcon","alt","imgSuccessAction","RestorePass","emailIn","setEmailIn","textInput","describe","btn","info","RestoreMailTC","CHANGE","successChangePass","success","changePassReducer","ChangePass","token","useParams","passInput","Auth","inner","exact","render","PATH","App","Boolean","window","location","hostname","match","test","testReducer","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","theme","createMuiTheme","typography","htmlFontSize","overrides","MuiInputBase","root","ReactDOM","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.c2941bde.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst cardsRequest = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true\r\n})\r\n\r\nexport const pingAPI = {\r\n    pingBack() {\r\n        const response = cardsRequest.get<number>(`/ping?frontTime=${Date.now()}`) //\r\n        return response\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    registration(email: string, password: string) {\r\n        return cardsRequest.post(`/auth/register/`, {email, password})\r\n            .then(res => res.data)\r\n    },\r\n    logIn(email: string, password: string, rememberMe: boolean) {\r\n        return cardsRequest.post(`/auth/login`, {email, password, rememberMe})\r\n            .then(res => res.data)\r\n    },\r\n    me() {\r\n        return cardsRequest.post(`/auth/me`, {})\r\n            .then(res => res.data)\r\n    },\r\n    logOut(){\r\n        return cardsRequest.delete(`/auth/me`)\r\n            .then(res => res.data)\r\n    },\r\n    updateMe(name: string, avatar: string) {\r\n        return cardsRequest.put(`/auth/me`, {name, avatar})\r\n            .then(res => res.data)\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return cardsRequest.post(`/auth/set-new-password`, {password, resetPasswordToken})\r\n            .then(res => res.data)\r\n    },\r\n    restorePassword(email: string, from: string, message: string) {\r\n        return cardsRequest.post(`https://neko-back.herokuapp.com/2.0/auth/forgot`, {email, from, message})\r\n            .then(res => res.data)\r\n    }\r\n\r\n}","import {authAPI} from '../../api/cards-api';\r\n\r\n// export enum ACTIONS {\r\n//     LOGIN = 'loginReducer/LOG-IN',\r\n//     LOGOUT = 'loginReducer/LOG-OUT'\r\n// }\r\n\r\nexport const LOGIN = 'loginReducer/LOG-IN' as const;\r\nexport const LOGOUT = 'loginReducer/LOG-OUT' as const;\r\nexport const ERROR = 'loginReducer/ERROR' as const;\r\nexport const LOG_FLOW = 'loginReducer/LOG-FLOW' as const;\r\n\r\nexport type UserResponeType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n    created: number;\r\n    updated: number;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    error?: string;\r\n}\r\n\r\ntype InitialStateType = {\r\n    users: UserResponeType[],\r\n    isLoggedIn: boolean,\r\n    error:string | null\r\n}\r\n\r\nexport const initialState: InitialStateType =  {\r\n    users: [],\r\n    isLoggedIn: false,\r\n    error:''\r\n}\r\n\r\ntype PropertiesType<ActionType> = ActionType extends {[key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof actions>>\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case LOG_FLOW: {\r\n            return ({\r\n                ...state,\r\n                isLoggedIn: action.payload.isLoggedIn\r\n            })\r\n        }\r\n        case LOGIN: {\r\n            return ({\r\n                ...state,\r\n                users: [{...action.payload.data}]\r\n            })\r\n        }\r\n\r\n        case ERROR: {\r\n            return ({\r\n                ...state,\r\n                isLoggedIn: false,\r\n                error: action.payload.error\r\n            })\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    logFlowAC: (isLoggedIn: boolean) => {\r\n        return ({\r\n            type: LOG_FLOW,\r\n            payload: {\r\n                isLoggedIn\r\n            }\r\n        })\r\n    },\r\n    loginAC:(data: any) => {\r\n        return ({\r\n            type: LOGIN,\r\n            payload: {\r\n                data\r\n            },\r\n        })\r\n    },\r\n    LoginErrorAC: (error: string) => {\r\n        return ({\r\n            type: ERROR,\r\n            payload: {\r\n                error\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe?: boolean) => (dispatch: any) => {\r\n    authAPI.logIn(email, password, rememberMe = true)\r\n        .then(data => {\r\n            dispatch(actions.loginAC(data))\r\n            dispatch(actions.logFlowAC(true))\r\n        }).catch((error) => {\r\n        console.log(error)\r\n        dispatch(actions.LoginErrorAC(error))\r\n    })\r\n}\r\nexport const LogoutTC = () => (dispatch: any) => {\r\n    authAPI.logOut()\r\n        .then((data) => {\r\n            dispatch(actions.logFlowAC(false))\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n}\r\n\r\n\r\nexport default loginReducer;","import React, {useEffect, useRef, useState} from 'react';\r\nimport styles from './Navigation.module.css';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport {Button} from '@material-ui/core';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {LogoutTC} from '../../../redux/loginReducer/loginReducer';\r\nimport {AppStateType} from '../../../redux/store';\r\n\r\nconst Navigation = (props: any) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    let [tempState, setTempState] = useState( [\r\n\r\n        {name: 'Login', path: 'auth/login'},\r\n        {name: 'Registration', path: 'auth/registration'},\r\n        {name: 'Restore Password', path: 'auth/restore-password'},\r\n        {name: 'Change Password', path: 'auth/change-password'},\r\n        {name: 'Profile', path: 'profile'}]);\r\n\r\n    let navLinks = tempState.map((link:{name: string, path:string}, index:number) => {\r\n        return <li key={index} className={styles.navLinkItem}>\r\n            <NavLink to={`/${(link.path).toLowerCase()}`} className={styles.menuLink} activeClassName={styles.menuLinkActive}>\r\n                <span>{link.name}</span>\r\n            </NavLink>\r\n        </li>\r\n    })\r\n\r\n    const onClickLogoutHandler = () => {\r\n        dispatch(LogoutTC())\r\n    }\r\n    return <ul className={styles.navList}>\r\n        {navLinks}\r\n        <Button variant=\"contained\" color=\"primary\" onClick={onClickLogoutHandler}>\r\n            Logout\r\n        </Button>\r\n    </ul>\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Navigation from './Navigation/Navigation';\r\nimport styles from './Header.module.css';\r\n\r\nconst Header = (props: any) => {\r\n    return <div className={styles.header}>\r\n        <Navigation/>\r\n    </div>\r\n}\r\n\r\nexport default Header;","import {authAPI} from '../../api/cards-api';\r\nimport {actions} from '../loginReducer/loginReducer';\r\n\r\nexport const PROFILE_ACTION = 'profileReducer/SET-PROFILE' as const;\r\n\r\ntype ProfileInfoType = {\r\n    id: number,\r\n    sex: string\r\n    email: string\r\n    dateOfBirth: string\r\n    city: string\r\n    country: string\r\n    status: string\r\n}\r\n\r\ntype InitialStateType = {\r\n    profileInfo: ProfileInfoType\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setProfileAC>;\r\n\r\n\r\nexport const initialState: InitialStateType =  {\r\n    profileInfo: {id: 1, sex: 'male', email: 'valakas@gmail.com', dateOfBirth: '29.02.1966', city: 'Samara', country: 'Ukraine', status: '---'}\r\n}\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case PROFILE_ACTION: {\r\n            return({\r\n                ...state,\r\n                profileInfo: action.data\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setProfileAC = (data: any) => {\r\n    return({\r\n        type: PROFILE_ACTION,\r\n        data\r\n    })\r\n}\r\n\r\nexport const fetchProfileTC = () => (dispatch: any) => {\r\n    console.log('fetch')\r\n    authAPI.me()\r\n        .then(data => {\r\n            dispatch(setProfileAC(data))\r\n            console.log(data)\r\n            dispatch(actions.logFlowAC(true))\r\n        })\r\n}\r\n\r\nexport default profileReducer;","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport {AppStateType} from '../../../redux/store';\r\nimport {fetchProfileTC} from '../../../redux/profileReducer/profileReducer';\r\n\r\nconst Profile = (props: any) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isLoggedIn = useSelector<AppStateType, boolean>( state => state.loginReducer.isLoggedIn);\r\n    const profileState = useSelector<AppStateType>( state => state.profileReducer.profileInfo);\r\n\r\n    useEffect(()=> {\r\n        dispatch(fetchProfileTC())\r\n    }, [isLoggedIn])\r\n\r\n    console.log(profileState)\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/auth/login'}/>\r\n    }\r\n\r\n    return <div className='profile'>\r\n        <span>Profile</span>\r\n    </div>\r\n}\r\n\r\nexport default Profile;","import React from 'react'\r\nimport './404.css'\r\n\r\nexport const PageNotFounded = () => {\r\n    return (\r\n        <div className={`wrapper`}>\r\n            <div className=\"face\">\r\n                <div className=\"band\">\r\n                    <div className=\"red\"></div>\r\n                    <div className=\"white\"></div>\r\n                    <div className=\"blue\"></div>\r\n                </div>\r\n                <div className=\"eyes\"></div>\r\n                <div className=\"dimples\"></div>\r\n                <div className=\"mouth\"></div>\r\n            </div>\r\n\r\n            <h1 className={`text`}>Oops! Something went wrong!</h1>\r\n            <div className=\"btn\">Return to Home</div>\r\n        </div>\r\n\r\n\r\n    )\r\n}","import React from 'react';\r\nimport styles from './Button.module.css';\r\n\r\nconst Button = (props: any) => {\r\n    let btnSign:string = 'button'\r\n    return <button className={styles.mainButton} type='submit'>\r\n        {btnSign}\r\n    </button>\r\n}\r\n\r\nexport default Button;","import React, {ChangeEvent, useState} from 'react';\r\nimport styles from './InputPass.module.scss';\r\nimport {faEye, faEyeSlash} from '@fortawesome/free-solid-svg-icons';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nexport type InputPropsType = {\r\n    type?: string\r\n    placeholder?: string\r\n    value?: string | undefined\r\n    className?: string\r\n    onKeyPress?: (e: React.KeyboardEvent<HTMLInputElement>) => void\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onBlur?:(e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\nexport const InputPass: React.FC<InputPropsType> = React.memo(({   placeholder = '',\r\n                                                        value = '',\r\n                                                        className,\r\n                                                        ...props}) => {\r\n    let [isBlind, setIsBlind] = useState(true)\r\n\r\n    const eyeToggle = () => {\r\n        setIsBlind(prev => !prev)\r\n    }\r\n\r\n    return <div>\r\n        <label ><span>{placeholder}</span></label>\r\n            <div className={styles.passInputBox}>\r\n                <input type={isBlind ? 'password' : 'text'}\r\n                       className={`${styles.inputText} ${className && styles[className]}`}\r\n                       value={value}\r\n                       onChange={props.onChange}\r\n                />\r\n                <button className={styles.passToggleBtn}>\r\n                    <FontAwesomeIcon icon={isBlind ? faEye : faEyeSlash} className={styles.eyeToggleIcon} onClick={eyeToggle}/>\r\n                </button>\r\n            </div>\r\n    </div>\r\n})","import React from 'react';\r\nimport styles from './Main.module.scss';\r\nimport Button from '../common/Button/Button';\r\nimport {InputPass} from '../common/InputPass/InputPass';\r\n\r\nconst Main = (props: any) => {\r\n\r\n    return(\r\n        <section className={styles.wrap}>\r\n            <div className={styles.container}>\r\n                <div className={styles.box}>\r\n                    <InputPass/>\r\n                    <Button />\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Main;","import React, {ChangeEvent, useCallback, useEffect, useReducer, useRef, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {loginTC} from '../../../redux/loginReducer/loginReducer';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {\r\n    FormControl,\r\n    IconButton,\r\n    Input,\r\n    InputLabel,\r\n    InputAdornment, Button, FormHelperText,\r\n} from '@material-ui/core';\r\nimport {Visibility, VisibilityOff} from '@material-ui/icons';\r\nimport {useFormik} from 'formik';\r\nimport {AppStateType} from '../../../redux/store';\r\n\r\ntype PropsType = {\r\n    styles: any\r\n}\r\n\r\nexport const Login: React.FC<PropsType> = ({styles, ...props}) => {\r\n\r\n    let [email, setEmail] = useState('')\r\n    let [pass, setPass] = useState('')\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.loginReducer.isLoggedIn);\r\n    const onClickHandler = () => {\r\n        dispatch(loginTC(email, pass, true))\r\n    }\r\n\r\n    const setEmailHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }, [email])\r\n    const setPassHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setPass(e.currentTarget.value)\r\n    }, [pass])\r\n\r\n    let [isBlind, setIsBlind] = useState(true)\r\n\r\n    const eyeToggle = () => {\r\n        setIsBlind(prev => !prev)\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        validate: values => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'password is required'\r\n                }\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values.email, values.password))\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return(\r\n        <>\r\n            <h1>Cards</h1>\r\n            <h2>Sign In</h2>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl {...formik.getFieldProps('email')}\r\n                             error={!!formik.errors.email}\r\n                             className={styles.controlInputs}>\r\n                    <InputLabel htmlFor=\"email\">Email</InputLabel>\r\n                    <Input id={\"email\"} value={email} onChange={setEmailHandler} aria-describedby={'email-error'}/>\r\n                    {!!formik.errors.email && <FormHelperText id=\"email-error\">{formik.errors.email}</FormHelperText>}\r\n                </FormControl>\r\n                <FormControl {...formik.getFieldProps('password')}\r\n                             error={!!formik.errors.password}\r\n                             className={styles.controlInputs}>\r\n                    <InputLabel htmlFor={\"password\"}>Password</InputLabel>\r\n                    <Input\r\n\r\n                        color={'primary'}\r\n                        id={\"password\"}\r\n                        type={isBlind ? 'password' : 'text'}\r\n                        value={pass}\r\n                        onChange={setPassHandler}\r\n                        aria-describedby={'password-error'}\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    aria-label={\"toggle password visibility\"}\r\n                                    onClick={eyeToggle}\r\n                                >\r\n                                    {isBlind ? <VisibilityOff/> : <Visibility/>}\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                    />\r\n                    {!!formik.errors.password &&\r\n                    <FormHelperText id=\"password-error\">{formik.errors.password}</FormHelperText>}\r\n                </FormControl>\r\n                <div className={styles.forgotBox}>\r\n                    <NavLink className={styles.navLinkForgotBox} to={'/auth/restore-password'}>\r\n                        <span>Forgot Password</span>\r\n                    </NavLink>\r\n                </div>\r\n                <Button disabled={false} type={'submit'} className={styles.formButtons} variant=\"contained\"\r\n                        color=\"primary\" onClick={onClickHandler}>\r\n                    Login\r\n                </Button>\r\n            </form>\r\n            <div className={styles.signUpBox}>\r\n                <p>Don't have an account?</p>\r\n                <NavLink to={'registration'} className={styles.signUpLink}>\r\n                    <span>Sign Up</span>\r\n                </NavLink>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Login;","import {authAPI} from \"../../api/cards-api\";\r\n\r\nexport const SUCCESS = 'registrationReducer/SUCCESS' as const\r\nexport const LOADING = 'registrationReducer/LOADING'as const\r\nexport const ERROR = 'registrationReducer/ERROR'as const\r\n\r\ntype addedUserType = {\r\n        created: string\r\n        email: string\r\n        isAdmin: boolean\r\n        name: string\r\n        publicCardPacksCount: number\r\n        rememberMe: boolean\r\n        updated: string\r\n        verified: boolean\r\n        __v: number\r\n        _id: string\r\n}\r\ntype InitialStateType = {\r\n    // addedUser:addedUserType\r\n    loading:boolean\r\n    error:string\r\n    registrationSuccess: boolean\r\n}\r\nconst initialState = {\r\n    // addedUser:{\r\n    //     created: '',\r\n    //     email: '',\r\n    //     isAdmin: false,\r\n    //     name: '',\r\n    //     publicCardPacksCount: 0,\r\n    //     rememberMe: false,\r\n    //     updated: '',\r\n    //     verified: false,\r\n    //     __v: 0,\r\n    //     _id: '',\r\n    // },\r\n    registrationSuccess:false,\r\n    loading:false,\r\n    error:''\r\n}\r\ntype PropertiesType<ActionType> = ActionType extends {[key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof actions>>\r\n\r\nconst registrationReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case SUCCESS: {\r\n            return {\r\n                ...state,\r\n                registrationSuccess: action.payload.registrationSuccess\r\n            }\r\n        }\r\n        case LOADING: {\r\n            return {\r\n                ...state,\r\n                error:'',\r\n                loading:action.payload.loading,\r\n                registrationSuccess:false\r\n            }\r\n        }\r\n        case ERROR: {\r\n            return {\r\n                ...state,\r\n                error:action.payload.error,\r\n                loading:false,\r\n                registrationSuccess:false\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    registrationAC: (registrationSuccess:boolean) => {\r\n        // data:addedUserType,\r\n        return ({\r\n            type: SUCCESS,\r\n            payload: {\r\n                // data,\r\n                registrationSuccess: registrationSuccess\r\n            }\r\n        })\r\n    },\r\n    registrationLoadingAC: (loading:boolean) => {\r\n        return({\r\n            type:LOADING,\r\n            payload : {\r\n                loading\r\n            }\r\n        })\r\n    },\r\n    registrationErrorAC: (error:string) => {\r\n        return({\r\n            type:ERROR,\r\n            payload : {\r\n                error\r\n            }\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const RegistrationTC = (email: string, password: string) => (dispatch: any) => {\r\n\r\n        dispatch(actions.registrationLoadingAC(true))\r\n        authAPI.registration(email, password)\r\n            .then((data) => {\r\n                dispatch(actions.registrationAC(true))\r\n                dispatch(actions.registrationLoadingAC(false))\r\n            })\r\n            .catch((error) => {\r\n                dispatch(actions.registrationErrorAC('error'))\r\n                console.log('error')\r\n            })\r\n\r\n}\r\n\r\nexport default registrationReducer;","import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RegistrationTC} from '../../../redux/registrationReducer/registrationReducer';\r\nimport {Redirect, useHistory} from 'react-router-dom';\r\nimport {AppStateType} from \"../../../redux/store\";\r\nimport preloader from '../../../assets/icons/preloader.svg'\r\nimport classNames from \"classnames\";\r\nimport {Button, FormControl, FormHelperText, IconButton, Input, InputAdornment, InputLabel} from '@material-ui/core';\r\nimport {useFormik} from 'formik';\r\nimport {Visibility, VisibilityOff} from '@material-ui/icons';\r\n\r\ntype PropsType = {\r\n    styles: any\r\n}\r\n\r\nconst Registration: React.FC<PropsType> = ({styles, ...props}) => {\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [pass, setPass] = useState('');\r\n    const [passSecond, setPassSecond] = useState('');\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            passwordConfirm: ''\r\n        },\r\n        validate: values => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'password is required'\r\n                }\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            alert(JSON.stringify(values, null, 2));\r\n        }\r\n    });\r\n    const history = useHistory()\r\n    const succeess = useSelector<AppStateType,boolean>(state => state.registrationReducer.registrationSuccess)\r\n    const loading = useSelector<AppStateType,boolean>(state => state.registrationReducer.loading)\r\n    const err = useSelector<AppStateType,string>(state => state.registrationReducer.error)\r\n\r\n    const setEmailHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }, [email])\r\n\r\n    const setPassHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setPass(e.currentTarget.value)\r\n    }, [pass])\r\n    const setPassConfHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n            setPassSecond(e.currentTarget.value)\r\n        }, [passSecond])\r\n\r\n    let [isBlind, setIsBlind] = useState(true)\r\n    let [isBlindPassConf, setIsBlindPassConf] = useState(true)\r\n\r\n    const eyeToggle = () => {\r\n        setIsBlind(prev => !prev)\r\n    }\r\n    const eyeTogglePassConf = () => {\r\n        setIsBlindPassConf(prev => !prev)\r\n    }\r\n\r\n    const onClickHandler = () => {\r\n        pass === passSecond &&\r\n        dispatch(RegistrationTC(email, pass))\r\n\r\n    }\r\n    const onClickBack = () => {\r\n       history.goBack()\r\n    }\r\n\r\n    if(succeess) {\r\n        return <Redirect to={'/auth/login'}/>\r\n    }\r\n    return (\r\n        <>\r\n            <h1>Cards</h1>\r\n            <h2>Sign Up</h2>\r\n            <FormControl {...formik.getFieldProps('email')}\r\n                         error={!!formik.errors.email}\r\n                         className={styles.controlInputs}>\r\n                <InputLabel htmlFor=\"email\">Email</InputLabel>\r\n                <Input id={\"email\"} value={email} onChange={setEmailHandler} aria-describedby={'email-error'}/>\r\n                {!!formik.errors.email && <FormHelperText id=\"email-error\">{formik.errors.email}</FormHelperText>}\r\n            </FormControl>\r\n            <FormControl {...formik.getFieldProps('password')}\r\n                         error={!!formik.errors.password}\r\n                         className={styles.controlInputs}>\r\n                <InputLabel htmlFor={\"password\"}>Password</InputLabel>\r\n                <Input\r\n\r\n                    color={'primary'}\r\n                    id={\"password\"}\r\n                    type={isBlind ? 'password' : 'text'}\r\n                    value={pass}\r\n                    onChange={setPassHandler}\r\n                    aria-describedby={'password-error'}\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                                aria-label={\"toggle password visibility\"}\r\n                                onClick={eyeToggle}\r\n                            >\r\n                                {isBlind ? <VisibilityOff/>: <Visibility/>}\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    }\r\n                />\r\n                {!!formik.errors.password &&\r\n                <FormHelperText id=\"password-error\">{formik.errors.password}</FormHelperText>}\r\n            </FormControl>\r\n\r\n            <FormControl {...formik.getFieldProps('passwordConfirm')}\r\n                         error={!!formik.errors.password}\r\n                         className={styles.controlInputs}>\r\n                <InputLabel htmlFor={\"passwordConfirm\"}>Confirm password</InputLabel>\r\n                <Input\r\n\r\n                    color={'primary'}\r\n                    id={\"passwordConfirm\"}\r\n                    type={isBlindPassConf ? 'password' :'text' }\r\n                    value={passSecond}\r\n                    onChange={setPassConfHandler}\r\n                    aria-describedby={'passwordConfirm-error'}\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                                aria-label={\"toggle password visibility\"}\r\n                                onClick={eyeTogglePassConf}\r\n                            >\r\n                                {isBlindPassConf ? <VisibilityOff/> : <Visibility/>}\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    }\r\n                />\r\n                {!!formik.errors.password &&\r\n                <FormHelperText id=\"passwordConfirm\">{formik.errors.password}</FormHelperText>}\r\n            </FormControl>\r\n\r\n            {err !== '' && <span style={{color: \"red\"}}> {err}</span>}\r\n\r\n            <div className={styles.btnContainer}>\r\n                <Button disabled={false} type={'button'} variant={\"contained\"}\r\n                        className={styles.formButtons}\r\n                        onClick={onClickBack}>\r\n                    Login\r\n                </Button>\r\n                <Button disabled={false} type={'submit'} variant={\"contained\"}\r\n                        className={styles.formButtons}\r\n                        color=\"primary\" onClick={onClickHandler}>\r\n                    Login\r\n                </Button>\r\n            </div>\r\n\r\n            {/*<div className={styles.btn_group}>*/}\r\n            {/*    <button className={styles.btnSecond} onClick={onClickBack}>Cancel</button>*/}\r\n            {/*    <button className={classNames(styles.btn, {*/}\r\n            {/*        [styles.disable]: loading*/}\r\n            {/*    })} disabled={loading} onClick={onClickHandler}>Registr {loading &&*/}\r\n            {/*    <img src={preloader} className={styles.preloader} alt=\"\"/>}</button>*/}\r\n            {/*</div>*/}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Registration;","import {authAPI} from \"../../api/cards-api\";\r\n\r\nconst RESTORE = 'restoreReducer/RESTORE' as const;\r\nconst ERROR = 'restoreReducer/ERROR' as const;\r\nconst LOADING = 'restoreReducer/LOADING' as const;\r\n\r\ntype InitialStateType = {\r\n    email: boolean\r\n    from: string\r\n    message: string\r\n    error: string\r\n    loading: boolean\r\n}\r\n\r\ntype PropertiesType<ActionType> = ActionType extends { [key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof actions>>\r\n\r\n\r\nexport const initialState: InitialStateType = {\r\n    email: false,\r\n    error: '',\r\n    loading: false,\r\n    from: 'test-front-admin <valtika>',\r\n    message: `<div style=\"background-color: lime; padding: 15px\">\t\r\n\tpassword recovery link: \r\n\t<a href='https://collabincubator/incu-cards/auth/change-password/$token$'>\r\n\tlink</a></div>` // хтмп-письмо, вместо $token$ бэк вставит токен\r\n}\r\n\r\nconst restorePassReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case RESTORE : {\r\n            return ({\r\n                ...state,\r\n                email: action.payload.email,\r\n                loading: false,\r\n                error: ''\r\n            })\r\n\r\n        }\r\n        case ERROR : {\r\n            return ({\r\n                ...state,\r\n                email: false,\r\n                loading: false,\r\n                error: action.payload.error\r\n            })\r\n\r\n        }\r\n        case LOADING : {\r\n            return ({\r\n                ...state,\r\n                email: false,\r\n                loading: action.payload.loading,\r\n                error: ''\r\n            })\r\n\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst actions = {\r\n    restoreEmailSuccessAC(email: boolean) {\r\n        return ({\r\n            type: RESTORE,\r\n            payload: {\r\n                email,\r\n            }\r\n        })\r\n    },\r\n    restoreEmailLoadingAC(loading: boolean) {\r\n        return ({\r\n            type: LOADING,\r\n            payload: {\r\n                loading,\r\n            }\r\n        })\r\n    },\r\n    restoreEmailErrorAC(error: string) {\r\n        return ({\r\n            type: ERROR,\r\n            payload: {\r\n                error,\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const RestoreMailTC = (email: string, from: string, message: string) => (dispatch: any) => {\r\n    dispatch(actions.restoreEmailLoadingAC(true))\r\n    authAPI.restorePassword(email, from, message)\r\n        .then(data => {\r\n            console.log(data.info)\r\n            dispatch(actions.restoreEmailSuccessAC(true))\r\n        }).catch((error) => {\r\n        dispatch(actions.restoreEmailErrorAC('error'))\r\n        console.log('error')\r\n    })\r\n\r\n}\r\nexport default restorePassReducer;","export default __webpack_public_path__ + \"static/media/mail-circle-icon.bc3a4042.svg\";","import React from 'react'\r\nimport emailCircleIcon from '../../../assets/img/svg/mail-circle-icon.svg';\r\n\r\ntype PropsType = {\r\n    styles: any\r\n}\r\n\r\nexport const CheckEmail: React.FC<PropsType> = ({styles, ...props}) => {\r\n    return (\r\n        <>\r\n            <h1>Cards</h1>\r\n            <img src={emailCircleIcon} alt={'email-circle-icon'} className={styles.imgSuccessAction} />\r\n            <h2>Check Email</h2>\r\n            <p>\r\n                We’ve sent an Email with instructions to example@mail.com\r\n            </p>\r\n        </>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport styles from \"./Restore.module.scss\";\r\nimport { RestoreMailTC} from \"../../../redux/restorePassReducer/restorePassReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\nimport {CheckEmail} from \"../Registration/CheckEmail\";\r\n\r\ntype PropsType = {\r\n    styles: any\r\n}\r\n\r\nconst RestorePass: React.FC<PropsType> = ({styles, ...props}) => {\r\n    const [emailIn, setEmailIn] = useState('');\r\n    const dispatch = useDispatch()\r\n    const from = useSelector<AppStateType,string>(state => state.restorePassReducer.from)\r\n    const email = useSelector<AppStateType,boolean>(state => state.restorePassReducer.email)\r\n    const message = useSelector<AppStateType,string>(state => state.restorePassReducer.message)\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(RestoreMailTC(emailIn,from,message))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {email ? <CheckEmail styles={styles}/>\r\n                :\r\n                <>\r\n                    <h1>Cards</h1>\r\n                    <h2>Forgot your password?</h2>\r\n                    <span>Email</span>\r\n                    <input className={styles.textInput}\r\n                           placeholder={'Email'}\r\n                           value={emailIn}\r\n                           onChange={(e) => {\r\n                               setEmailIn(e.currentTarget.value)\r\n                           }}\r\n                    />\r\n                    <div className={styles.describe}>\r\n                        Enter your email address and we will send you further instructions\r\n                    </div>\r\n\r\n                    <button className={styles.btn}\r\n                            onClick={onClickHandler}\r\n                    >Send Instructions\r\n                    </button>\r\n\r\n                    <div className={styles.describe}>\r\n                        Did you remember your password?\r\n                    </div>\r\n                    <div>\r\n                        Try logging in\r\n                    </div>\r\n\r\n                </>}</>\r\n    )\r\n}\r\n\r\nexport default RestorePass;","import {authAPI} from \"../../api/cards-api\";\r\n\r\nexport const CHANGE_PASS: string = 'changePassreducer/CHANGE_PASS';\r\n\r\n\r\nconst CHANGE = 'changePasswordReducer/CHANGE' as const;\r\nconst ERROR = 'changePasswordReducer/ERROR' as const;\r\nconst LOADING = 'changePasswordReducer/LOADING' as const;\r\n\r\n\r\ntype InitialStateType = {\r\n    successChangePass:boolean\r\n    loading:boolean\r\n    error:string\r\n}\r\n\r\ntype PropertiesType<ActionType> = ActionType extends {[key: string]: infer ResponseType } ? ResponseType : never;\r\ntype ActionsType = ReturnType<PropertiesType<typeof actions>>\r\n\r\n\r\nexport const initialState: InitialStateType =  {\r\n    successChangePass:false,\r\n    loading:false,\r\n    error:''\r\n}\r\n\r\nconst changePassReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case CHANGE: {\r\n            return ({\r\n                ...state,\r\n                successChangePass:action.payload.success,\r\n                loading:false,\r\n                error:''\r\n            })\r\n        }\r\n        case ERROR: {\r\n            return ({\r\n                ...state,\r\n                successChangePass:false,\r\n                loading:false,\r\n                error:action.payload.error\r\n            })\r\n        }\r\n        case LOADING: {\r\n            return ({\r\n                ...state,\r\n                successChangePass:false,\r\n                loading:action.payload.loading,\r\n                error:''\r\n            })\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nconst actions = {\r\n    successChangePassAC (success:boolean) {\r\n        return ({\r\n            type:CHANGE,\r\n            payload: {\r\n                success\r\n            }\r\n        })\r\n    },\r\n    loadingAC (loading:boolean) {\r\n        return ({\r\n            type:LOADING,\r\n            payload: {\r\n                loading\r\n            }\r\n        })\r\n    },\r\n    errorAc (error:string) {\r\n        return ({\r\n            type:ERROR,\r\n            payload: {\r\n                error\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const RestorePassTC = (password:string,resetPasswordToken:string) => (dispatch: any) => {\r\n        dispatch(actions.loadingAC(true))\r\n        authAPI.setNewPassword(password,resetPasswordToken)\r\n            .then( data => {\r\n                console.log(`${data.data.info}`)\r\n               dispatch(actions.successChangePassAC(true))\r\n                dispatch(actions.loadingAC(false))\r\n            }).catch((error)=>{\r\n            dispatch(actions.errorAc('error'))\r\n        })\r\n}\r\n\r\nexport default changePassReducer;","import React, {useState} from 'react';\r\nimport styles from './ChangePass.module.scss'\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { RestorePassTC } from '../../../redux/changePassReducer/changePassReducer';\r\nimport {AppStateType} from \"../../../redux/store\";\r\n\r\nconst ChangePass = (props: any) => {\r\n    const [pass, setPass] = useState('');\r\n    const success = useSelector<AppStateType,boolean>(state => state.changePassReducer.successChangePass)\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{ token: string }>()\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(RestorePassTC(pass,token))\r\n        if(success) {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n\r\n    }\r\n    debugger\r\n    return (\r\n        <>\r\n            <h1>Cards</h1>\r\n            <h2>Sign Up</h2>\r\n            <span>Password</span>\r\n            <input type='password'\r\n                   value={pass}\r\n                   onChange={(e) => setPass(e.currentTarget.value)}\r\n                   className={`${styles.textInput} ${styles.passInput}`}\r\n                   placeholder={'password'}/>\r\n            <input type='passwordConfirm'\r\n                   value={pass}\r\n                   onChange={(e) => setPass(e.currentTarget.value)}\r\n                   className={`${styles.textInput} ${styles.passInput}`}\r\n                   placeholder={'passwordConfirm'}/>\r\n            <div className={styles.describe}>\r\n                Create new password and we will send you further instructions to email\r\n            </div>\r\n            <button className={styles.btn}\r\n                    onClick={onClickHandler}>Create new password\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChangePass;","import React from 'react';\r\nimport styles from '../Auth/Auth.module.scss';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Login from '../Login/Login';\r\nimport Registration from '../Registration/Registration';\r\nimport RestorePass from '../RestorePass/RestorePass';\r\nimport ChangePass from '../ChangePass/ChangePass';\r\n\r\nexport const Auth: React.FC = (props) => {\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.box}>\r\n                <div className={styles.inner}>\r\n                    <Switch>\r\n                        <Route path={'/auth/login'} exact={true} render={(props)=><Login styles={styles} /> }/>\r\n                        <Route path={'/auth/registration'} exact={true} render={(props)=><Registration styles={styles} /> }/>\r\n                        <Route path={'/auth/restore-password'} exact={true} render={(props)=><RestorePass styles={styles} /> }/>\r\n                        <Route path={'/auth/change-password/:token'} exact={true} render={(props)=><ChangePass styles={styles} /> }/>\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth;","import React from 'react';\r\nimport Header from './components/Header/Header';\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport Profile from \"./components/Main/Profile/Profile\";\r\nimport {PageNotFounded} from \"./components/Main/PageNotFounded/PageNotFounded\";\r\nimport Main from \"./components/Main/Main\";\r\nimport Auth from './components/Main/Auth/Auth';\r\n\r\nconst PATH = {\r\n    AUTH: '/auth',\r\n    LOGIN: 'auth/login',\r\n    PROFILE: '/profile',\r\n    NEW_PASSWORD:'/changepass/', //:token\r\n    REGISTER:'/registration',\r\n    RESTORE_PASS:'/restorepass',\r\n    TEST_STAND:'/stand',\r\n    ALL:'*',\r\n}\r\n\r\nconst App = (props: any) => {\r\n\r\n  return (\r\n      <div>\r\n          <Header/>\r\n          <Switch>\r\n              <Route path={'/main'} exact render={() => <Main/>}/>\r\n              <Route path={'/'} exact render={() => <Redirect to={PATH.LOGIN}/>}/>\r\n              <Route path={PATH.AUTH} render={(props) => <Auth  />}/>\r\n              <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n              <Route render={() => <PageNotFounded/>}/>\r\n          </Switch>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const TEST_CONSTANT = 'testReducer/TEST-CONSTANT';\r\n\r\nconst initialState = {\r\n    test: 'test'\r\n};\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const testReducer = (state: InitialStateType = initialState, action: TestActionType):InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        default: return state;\r\n    }\r\n}\r\ntype actionsType = TestActionType;\r\n\r\nexport const action:{type: string} = {\r\n    type: TEST_CONSTANT\r\n}\r\nexport type TestActionType = {\r\n    type: typeof TEST_CONSTANT\r\n};\r\n\r\nexport default testReducer;","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport testReducer from './testReducer/testReducer';\r\nimport thunk from 'redux-thunk';\r\nimport loginReducer from './loginReducer/loginReducer';\r\nimport profileReducer from './profileReducer/profileReducer';\r\nimport registrationReducer from './registrationReducer/registrationReducer';\r\nimport restorePassReducer from './restorePassReducer/restorePassReducer';\r\nimport changePassReducer from './changePassReducer/changePassReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    testReducer,\r\n    loginReducer,\r\n    profileReducer,\r\n    registrationReducer,\r\n    restorePassReducer,\r\n    changePassReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport './fonts.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './redux/store';\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\nimport {createMuiTheme} from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        htmlFontSize: 10\r\n    },\r\n    overrides: {\r\n        MuiInputBase: {\r\n            root: {\r\n                color: \"rgb(45, 46, 70)\"\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <ThemeProvider theme={theme}>\r\n            <App/>\r\n            </ThemeProvider>\r\n        </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Auth_container__3qloX\",\"box\":\"Auth_box__3N9n6\",\"inner\":\"Auth_inner__3t6mj\",\"imgSuccessAction\":\"Auth_imgSuccessAction__1rx3n\",\"controlInputs\":\"Auth_controlInputs__2iHjQ\",\"btnContainer\":\"Auth_btnContainer__39yjU\",\"formButtons\":\"Auth_formButtons__3ulGq\",\"btn\":\"Auth_btn__3ySL-\",\"forgotBox\":\"Auth_forgotBox__12JkY\",\"navLinkForgotBox\":\"Auth_navLinkForgotBox__1vQja\",\"signUpBox\":\"Auth_signUpBox__ML6bI\",\"signUpLink\":\"Auth_signUpLink__xaTUG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ChangePass_container__3cXkS\",\"box\":\"ChangePass_box__9WWR5\",\"inner\":\"ChangePass_inner__2p8X0\",\"textInput\":\"ChangePass_textInput__1PZBd\",\"describe\":\"ChangePass_describe__2Ez18\",\"btn\":\"ChangePass_btn__ffUD1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"passInputBox\":\"InputPass_passInputBox__1dxNG\",\"inputText\":\"InputPass_inputText__26Hfm\",\"passToggleBtn\":\"InputPass_passToggleBtn__2BKPI\",\"eyeToggleIcon\":\"InputPass_eyeToggleIcon__1cuBM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navList\":\"Navigation_navList__2WvWV\",\"navLinkItem\":\"Navigation_navLinkItem__36atT\",\"menuLink\":\"Navigation_menuLink__3mmUh\",\"menuLinkActive\":\"Navigation_menuLinkActive__oK069\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Main_wrap__1-szS\",\"container\":\"Main_container__3ZKB8\",\"box\":\"Main_box__3aba4\",\"col\":\"Main_col__3h_SI\",\"testText\":\"Main_testText__9SJeR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1LmaF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainButton\":\"Button_mainButton__k_1wW\"};"],"sourceRoot":""}